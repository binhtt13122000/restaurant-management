schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
columns and relationships of "account"
"""
type account {
  avatar: String

  """An array relationship"""
  cashierlogs(
    """distinct select on columns"""
    distinct_on: [cashierlog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cashierlog_order_by!]

    """filter the rows returned"""
    where: cashierlog_bool_exp
  ): [cashierlog!]!

  """An aggregate relationship"""
  cashierlogs_aggregate(
    """distinct select on columns"""
    distinct_on: [cashierlog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cashierlog_order_by!]

    """filter the rows returned"""
    where: cashierlog_bool_exp
  ): cashierlog_aggregate!

  """An array relationship"""
  checks(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): [check!]!

  """An aggregate relationship"""
  checks_aggregate(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): check_aggregate!
  email: String!
  fullname: String!
  id: Int!
  password: String!
  phone: String!

  """An object relationship"""
  role: role!
  roleid: Int!
  status: user_status
  username: String!
}

"""
aggregated selection of "account"
"""
type account_aggregate {
  aggregate: account_aggregate_fields
  nodes: [account!]!
}

"""
aggregate fields of "account"
"""
type account_aggregate_fields {
  avg: account_avg_fields
  count(columns: [account_select_column!], distinct: Boolean): Int!
  max: account_max_fields
  min: account_min_fields
  stddev: account_stddev_fields
  stddev_pop: account_stddev_pop_fields
  stddev_samp: account_stddev_samp_fields
  sum: account_sum_fields
  var_pop: account_var_pop_fields
  var_samp: account_var_samp_fields
  variance: account_variance_fields
}

"""
order by aggregate values of table "account"
"""
input account_aggregate_order_by {
  avg: account_avg_order_by
  count: order_by
  max: account_max_order_by
  min: account_min_order_by
  stddev: account_stddev_order_by
  stddev_pop: account_stddev_pop_order_by
  stddev_samp: account_stddev_samp_order_by
  sum: account_sum_order_by
  var_pop: account_var_pop_order_by
  var_samp: account_var_samp_order_by
  variance: account_variance_order_by
}

"""
input type for inserting array relation for remote table "account"
"""
input account_arr_rel_insert_input {
  data: [account_insert_input!]!

  """upsert condition"""
  on_conflict: account_on_conflict
}

"""aggregate avg on columns"""
type account_avg_fields {
  id: Float
  roleid: Float
}

"""
order by avg() on columns of table "account"
"""
input account_avg_order_by {
  id: order_by
  roleid: order_by
}

"""
Boolean expression to filter rows from the table "account". All fields are combined with a logical 'AND'.
"""
input account_bool_exp {
  _and: [account_bool_exp!]
  _not: account_bool_exp
  _or: [account_bool_exp!]
  avatar: String_comparison_exp
  cashierlogs: cashierlog_bool_exp
  checks: check_bool_exp
  email: String_comparison_exp
  fullname: String_comparison_exp
  id: Int_comparison_exp
  password: String_comparison_exp
  phone: String_comparison_exp
  role: role_bool_exp
  roleid: Int_comparison_exp
  status: user_status_comparison_exp
  username: String_comparison_exp
}

"""
unique or primary key constraints on table "account"
"""
enum account_constraint {
  """unique or primary key constraint"""
  account_email_key

  """unique or primary key constraint"""
  account_phone_key

  """unique or primary key constraint"""
  account_pkey

  """unique or primary key constraint"""
  account_username_key
}

"""
input type for incrementing numeric columns in table "account"
"""
input account_inc_input {
  id: Int
  roleid: Int
}

"""
input type for inserting data into table "account"
"""
input account_insert_input {
  avatar: String
  cashierlogs: cashierlog_arr_rel_insert_input
  checks: check_arr_rel_insert_input
  email: String
  fullname: String
  id: Int
  password: String
  phone: String
  role: role_obj_rel_insert_input
  roleid: Int
  status: user_status
  username: String
}

"""aggregate max on columns"""
type account_max_fields {
  avatar: String
  email: String
  fullname: String
  id: Int
  password: String
  phone: String
  roleid: Int
  status: user_status
  username: String
}

"""
order by max() on columns of table "account"
"""
input account_max_order_by {
  avatar: order_by
  email: order_by
  fullname: order_by
  id: order_by
  password: order_by
  phone: order_by
  roleid: order_by
  status: order_by
  username: order_by
}

"""aggregate min on columns"""
type account_min_fields {
  avatar: String
  email: String
  fullname: String
  id: Int
  password: String
  phone: String
  roleid: Int
  status: user_status
  username: String
}

"""
order by min() on columns of table "account"
"""
input account_min_order_by {
  avatar: order_by
  email: order_by
  fullname: order_by
  id: order_by
  password: order_by
  phone: order_by
  roleid: order_by
  status: order_by
  username: order_by
}

"""
response of any mutation on the table "account"
"""
type account_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [account!]!
}

"""
input type for inserting object relation for remote table "account"
"""
input account_obj_rel_insert_input {
  data: account_insert_input!

  """upsert condition"""
  on_conflict: account_on_conflict
}

"""
on_conflict condition type for table "account"
"""
input account_on_conflict {
  constraint: account_constraint!
  update_columns: [account_update_column!]! = []
  where: account_bool_exp
}

"""Ordering options when selecting data from "account"."""
input account_order_by {
  avatar: order_by
  cashierlogs_aggregate: cashierlog_aggregate_order_by
  checks_aggregate: check_aggregate_order_by
  email: order_by
  fullname: order_by
  id: order_by
  password: order_by
  phone: order_by
  role: role_order_by
  roleid: order_by
  status: order_by
  username: order_by
}

"""primary key columns input for table: account"""
input account_pk_columns_input {
  id: Int!
}

"""
select columns of table "account"
"""
enum account_select_column {
  """column name"""
  avatar

  """column name"""
  email

  """column name"""
  fullname

  """column name"""
  id

  """column name"""
  password

  """column name"""
  phone

  """column name"""
  roleid

  """column name"""
  status

  """column name"""
  username
}

"""
input type for updating data in table "account"
"""
input account_set_input {
  avatar: String
  email: String
  fullname: String
  id: Int
  password: String
  phone: String
  roleid: Int
  status: user_status
  username: String
}

"""aggregate stddev on columns"""
type account_stddev_fields {
  id: Float
  roleid: Float
}

"""
order by stddev() on columns of table "account"
"""
input account_stddev_order_by {
  id: order_by
  roleid: order_by
}

"""aggregate stddev_pop on columns"""
type account_stddev_pop_fields {
  id: Float
  roleid: Float
}

"""
order by stddev_pop() on columns of table "account"
"""
input account_stddev_pop_order_by {
  id: order_by
  roleid: order_by
}

"""aggregate stddev_samp on columns"""
type account_stddev_samp_fields {
  id: Float
  roleid: Float
}

"""
order by stddev_samp() on columns of table "account"
"""
input account_stddev_samp_order_by {
  id: order_by
  roleid: order_by
}

"""aggregate sum on columns"""
type account_sum_fields {
  id: Int
  roleid: Int
}

"""
order by sum() on columns of table "account"
"""
input account_sum_order_by {
  id: order_by
  roleid: order_by
}

"""
update columns of table "account"
"""
enum account_update_column {
  """column name"""
  avatar

  """column name"""
  email

  """column name"""
  fullname

  """column name"""
  id

  """column name"""
  password

  """column name"""
  phone

  """column name"""
  roleid

  """column name"""
  status

  """column name"""
  username
}

"""aggregate var_pop on columns"""
type account_var_pop_fields {
  id: Float
  roleid: Float
}

"""
order by var_pop() on columns of table "account"
"""
input account_var_pop_order_by {
  id: order_by
  roleid: order_by
}

"""aggregate var_samp on columns"""
type account_var_samp_fields {
  id: Float
  roleid: Float
}

"""
order by var_samp() on columns of table "account"
"""
input account_var_samp_order_by {
  id: order_by
  roleid: order_by
}

"""aggregate variance on columns"""
type account_variance_fields {
  id: Float
  roleid: Float
}

"""
order by variance() on columns of table "account"
"""
input account_variance_order_by {
  id: order_by
  roleid: order_by
}

scalar basic_status

"""
Boolean expression to compare columns of type "basic_status". All fields are combined with logical 'AND'.
"""
input basic_status_comparison_exp {
  _eq: basic_status
  _gt: basic_status
  _gte: basic_status
  _in: [basic_status!]
  _is_null: Boolean
  _lt: basic_status
  _lte: basic_status
  _neq: basic_status
  _nin: [basic_status!]
}

"""
columns and relationships of "bill"
"""
type bill {
  """An array relationship"""
  billdetails(
    """distinct select on columns"""
    distinct_on: [billdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billdetail_order_by!]

    """filter the rows returned"""
    where: billdetail_bool_exp
  ): [billdetail!]!

  """An aggregate relationship"""
  billdetails_aggregate(
    """distinct select on columns"""
    distinct_on: [billdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billdetail_order_by!]

    """filter the rows returned"""
    where: billdetail_bool_exp
  ): billdetail_aggregate!
  billno: String!

  """An array relationship"""
  billpayments(
    """distinct select on columns"""
    distinct_on: [billpayment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billpayment_order_by!]

    """filter the rows returned"""
    where: billpayment_bool_exp
  ): [billpayment!]!

  """An aggregate relationship"""
  billpayments_aggregate(
    """distinct select on columns"""
    distinct_on: [billpayment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billpayment_order_by!]

    """filter the rows returned"""
    where: billpayment_bool_exp
  ): billpayment_aggregate!

  """An object relationship"""
  check: check!
  checkid: Int!
  creationtime: timestamp!
  creatorid: Int!
  guestname: String
  id: Int!
  note: String
  status: bill_status!
  subtotal: numeric!
  totalamount: numeric!
  totaltax: numeric!
  updaterid: Int
  updatetime: timestamp
}

"""
aggregated selection of "bill"
"""
type bill_aggregate {
  aggregate: bill_aggregate_fields
  nodes: [bill!]!
}

"""
aggregate fields of "bill"
"""
type bill_aggregate_fields {
  avg: bill_avg_fields
  count(columns: [bill_select_column!], distinct: Boolean): Int!
  max: bill_max_fields
  min: bill_min_fields
  stddev: bill_stddev_fields
  stddev_pop: bill_stddev_pop_fields
  stddev_samp: bill_stddev_samp_fields
  sum: bill_sum_fields
  var_pop: bill_var_pop_fields
  var_samp: bill_var_samp_fields
  variance: bill_variance_fields
}

"""
order by aggregate values of table "bill"
"""
input bill_aggregate_order_by {
  avg: bill_avg_order_by
  count: order_by
  max: bill_max_order_by
  min: bill_min_order_by
  stddev: bill_stddev_order_by
  stddev_pop: bill_stddev_pop_order_by
  stddev_samp: bill_stddev_samp_order_by
  sum: bill_sum_order_by
  var_pop: bill_var_pop_order_by
  var_samp: bill_var_samp_order_by
  variance: bill_variance_order_by
}

"""
input type for inserting array relation for remote table "bill"
"""
input bill_arr_rel_insert_input {
  data: [bill_insert_input!]!

  """upsert condition"""
  on_conflict: bill_on_conflict
}

"""aggregate avg on columns"""
type bill_avg_fields {
  checkid: Float
  creatorid: Float
  id: Float
  subtotal: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
}

"""
order by avg() on columns of table "bill"
"""
input bill_avg_order_by {
  checkid: order_by
  creatorid: order_by
  id: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
}

"""
Boolean expression to filter rows from the table "bill". All fields are combined with a logical 'AND'.
"""
input bill_bool_exp {
  _and: [bill_bool_exp!]
  _not: bill_bool_exp
  _or: [bill_bool_exp!]
  billdetails: billdetail_bool_exp
  billno: String_comparison_exp
  billpayments: billpayment_bool_exp
  check: check_bool_exp
  checkid: Int_comparison_exp
  creationtime: timestamp_comparison_exp
  creatorid: Int_comparison_exp
  guestname: String_comparison_exp
  id: Int_comparison_exp
  note: String_comparison_exp
  status: bill_status_comparison_exp
  subtotal: numeric_comparison_exp
  totalamount: numeric_comparison_exp
  totaltax: numeric_comparison_exp
  updaterid: Int_comparison_exp
  updatetime: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "bill"
"""
enum bill_constraint {
  """unique or primary key constraint"""
  bill_billno_key

  """unique or primary key constraint"""
  bill_pkey
}

"""
input type for incrementing numeric columns in table "bill"
"""
input bill_inc_input {
  checkid: Int
  creatorid: Int
  id: Int
  subtotal: numeric
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
}

"""
input type for inserting data into table "bill"
"""
input bill_insert_input {
  billdetails: billdetail_arr_rel_insert_input
  billno: String
  billpayments: billpayment_arr_rel_insert_input
  check: check_obj_rel_insert_input
  checkid: Int
  creationtime: timestamp
  creatorid: Int
  guestname: String
  id: Int
  note: String
  status: bill_status
  subtotal: numeric
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  updatetime: timestamp
}

"""aggregate max on columns"""
type bill_max_fields {
  billno: String
  checkid: Int
  creationtime: timestamp
  creatorid: Int
  guestname: String
  id: Int
  note: String
  status: bill_status
  subtotal: numeric
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  updatetime: timestamp
}

"""
order by max() on columns of table "bill"
"""
input bill_max_order_by {
  billno: order_by
  checkid: order_by
  creationtime: order_by
  creatorid: order_by
  guestname: order_by
  id: order_by
  note: order_by
  status: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  updatetime: order_by
}

"""aggregate min on columns"""
type bill_min_fields {
  billno: String
  checkid: Int
  creationtime: timestamp
  creatorid: Int
  guestname: String
  id: Int
  note: String
  status: bill_status
  subtotal: numeric
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  updatetime: timestamp
}

"""
order by min() on columns of table "bill"
"""
input bill_min_order_by {
  billno: order_by
  checkid: order_by
  creationtime: order_by
  creatorid: order_by
  guestname: order_by
  id: order_by
  note: order_by
  status: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  updatetime: order_by
}

"""
response of any mutation on the table "bill"
"""
type bill_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [bill!]!
}

"""
input type for inserting object relation for remote table "bill"
"""
input bill_obj_rel_insert_input {
  data: bill_insert_input!

  """upsert condition"""
  on_conflict: bill_on_conflict
}

"""
on_conflict condition type for table "bill"
"""
input bill_on_conflict {
  constraint: bill_constraint!
  update_columns: [bill_update_column!]! = []
  where: bill_bool_exp
}

"""Ordering options when selecting data from "bill"."""
input bill_order_by {
  billdetails_aggregate: billdetail_aggregate_order_by
  billno: order_by
  billpayments_aggregate: billpayment_aggregate_order_by
  check: check_order_by
  checkid: order_by
  creationtime: order_by
  creatorid: order_by
  guestname: order_by
  id: order_by
  note: order_by
  status: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  updatetime: order_by
}

"""primary key columns input for table: bill"""
input bill_pk_columns_input {
  id: Int!
}

"""
select columns of table "bill"
"""
enum bill_select_column {
  """column name"""
  billno

  """column name"""
  checkid

  """column name"""
  creationtime

  """column name"""
  creatorid

  """column name"""
  guestname

  """column name"""
  id

  """column name"""
  note

  """column name"""
  status

  """column name"""
  subtotal

  """column name"""
  totalamount

  """column name"""
  totaltax

  """column name"""
  updaterid

  """column name"""
  updatetime
}

"""
input type for updating data in table "bill"
"""
input bill_set_input {
  billno: String
  checkid: Int
  creationtime: timestamp
  creatorid: Int
  guestname: String
  id: Int
  note: String
  status: bill_status
  subtotal: numeric
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  updatetime: timestamp
}

scalar bill_status

"""
Boolean expression to compare columns of type "bill_status". All fields are combined with logical 'AND'.
"""
input bill_status_comparison_exp {
  _eq: bill_status
  _gt: bill_status
  _gte: bill_status
  _in: [bill_status!]
  _is_null: Boolean
  _lt: bill_status
  _lte: bill_status
  _neq: bill_status
  _nin: [bill_status!]
}

"""aggregate stddev on columns"""
type bill_stddev_fields {
  checkid: Float
  creatorid: Float
  id: Float
  subtotal: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
}

"""
order by stddev() on columns of table "bill"
"""
input bill_stddev_order_by {
  checkid: order_by
  creatorid: order_by
  id: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
}

"""aggregate stddev_pop on columns"""
type bill_stddev_pop_fields {
  checkid: Float
  creatorid: Float
  id: Float
  subtotal: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
}

"""
order by stddev_pop() on columns of table "bill"
"""
input bill_stddev_pop_order_by {
  checkid: order_by
  creatorid: order_by
  id: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
}

"""aggregate stddev_samp on columns"""
type bill_stddev_samp_fields {
  checkid: Float
  creatorid: Float
  id: Float
  subtotal: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
}

"""
order by stddev_samp() on columns of table "bill"
"""
input bill_stddev_samp_order_by {
  checkid: order_by
  creatorid: order_by
  id: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
}

"""aggregate sum on columns"""
type bill_sum_fields {
  checkid: Int
  creatorid: Int
  id: Int
  subtotal: numeric
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
}

"""
order by sum() on columns of table "bill"
"""
input bill_sum_order_by {
  checkid: order_by
  creatorid: order_by
  id: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
}

"""
update columns of table "bill"
"""
enum bill_update_column {
  """column name"""
  billno

  """column name"""
  checkid

  """column name"""
  creationtime

  """column name"""
  creatorid

  """column name"""
  guestname

  """column name"""
  id

  """column name"""
  note

  """column name"""
  status

  """column name"""
  subtotal

  """column name"""
  totalamount

  """column name"""
  totaltax

  """column name"""
  updaterid

  """column name"""
  updatetime
}

"""aggregate var_pop on columns"""
type bill_var_pop_fields {
  checkid: Float
  creatorid: Float
  id: Float
  subtotal: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
}

"""
order by var_pop() on columns of table "bill"
"""
input bill_var_pop_order_by {
  checkid: order_by
  creatorid: order_by
  id: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
}

"""aggregate var_samp on columns"""
type bill_var_samp_fields {
  checkid: Float
  creatorid: Float
  id: Float
  subtotal: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
}

"""
order by var_samp() on columns of table "bill"
"""
input bill_var_samp_order_by {
  checkid: order_by
  creatorid: order_by
  id: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
}

"""aggregate variance on columns"""
type bill_variance_fields {
  checkid: Float
  creatorid: Float
  id: Float
  subtotal: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
}

"""
order by variance() on columns of table "bill"
"""
input bill_variance_order_by {
  checkid: order_by
  creatorid: order_by
  id: order_by
  subtotal: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
}

"""
columns and relationships of "billdetail"
"""
type billdetail {
  amount: numeric!

  """An object relationship"""
  bill: bill!
  billid: Int!
  id: Int!

  """An object relationship"""
  item: item!
  itemid: Int!
  itemname: String!
  itemprice: numeric!
  quantity: float8!
  subtotal: numeric!
  taxamount: numeric!
}

"""
aggregated selection of "billdetail"
"""
type billdetail_aggregate {
  aggregate: billdetail_aggregate_fields
  nodes: [billdetail!]!
}

"""
aggregate fields of "billdetail"
"""
type billdetail_aggregate_fields {
  avg: billdetail_avg_fields
  count(columns: [billdetail_select_column!], distinct: Boolean): Int!
  max: billdetail_max_fields
  min: billdetail_min_fields
  stddev: billdetail_stddev_fields
  stddev_pop: billdetail_stddev_pop_fields
  stddev_samp: billdetail_stddev_samp_fields
  sum: billdetail_sum_fields
  var_pop: billdetail_var_pop_fields
  var_samp: billdetail_var_samp_fields
  variance: billdetail_variance_fields
}

"""
order by aggregate values of table "billdetail"
"""
input billdetail_aggregate_order_by {
  avg: billdetail_avg_order_by
  count: order_by
  max: billdetail_max_order_by
  min: billdetail_min_order_by
  stddev: billdetail_stddev_order_by
  stddev_pop: billdetail_stddev_pop_order_by
  stddev_samp: billdetail_stddev_samp_order_by
  sum: billdetail_sum_order_by
  var_pop: billdetail_var_pop_order_by
  var_samp: billdetail_var_samp_order_by
  variance: billdetail_variance_order_by
}

"""
input type for inserting array relation for remote table "billdetail"
"""
input billdetail_arr_rel_insert_input {
  data: [billdetail_insert_input!]!

  """upsert condition"""
  on_conflict: billdetail_on_conflict
}

"""aggregate avg on columns"""
type billdetail_avg_fields {
  amount: Float
  billid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
}

"""
order by avg() on columns of table "billdetail"
"""
input billdetail_avg_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""
Boolean expression to filter rows from the table "billdetail". All fields are combined with a logical 'AND'.
"""
input billdetail_bool_exp {
  _and: [billdetail_bool_exp!]
  _not: billdetail_bool_exp
  _or: [billdetail_bool_exp!]
  amount: numeric_comparison_exp
  bill: bill_bool_exp
  billid: Int_comparison_exp
  id: Int_comparison_exp
  item: item_bool_exp
  itemid: Int_comparison_exp
  itemname: String_comparison_exp
  itemprice: numeric_comparison_exp
  quantity: float8_comparison_exp
  subtotal: numeric_comparison_exp
  taxamount: numeric_comparison_exp
}

"""
unique or primary key constraints on table "billdetail"
"""
enum billdetail_constraint {
  """unique or primary key constraint"""
  billdetail_pkey
}

"""
input type for incrementing numeric columns in table "billdetail"
"""
input billdetail_inc_input {
  amount: numeric
  billid: Int
  id: Int
  itemid: Int
  itemprice: numeric
  quantity: float8
  subtotal: numeric
  taxamount: numeric
}

"""
input type for inserting data into table "billdetail"
"""
input billdetail_insert_input {
  amount: numeric
  bill: bill_obj_rel_insert_input
  billid: Int
  id: Int
  item: item_obj_rel_insert_input
  itemid: Int
  itemname: String
  itemprice: numeric
  quantity: float8
  subtotal: numeric
  taxamount: numeric
}

"""aggregate max on columns"""
type billdetail_max_fields {
  amount: numeric
  billid: Int
  id: Int
  itemid: Int
  itemname: String
  itemprice: numeric
  quantity: float8
  subtotal: numeric
  taxamount: numeric
}

"""
order by max() on columns of table "billdetail"
"""
input billdetail_max_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemname: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""aggregate min on columns"""
type billdetail_min_fields {
  amount: numeric
  billid: Int
  id: Int
  itemid: Int
  itemname: String
  itemprice: numeric
  quantity: float8
  subtotal: numeric
  taxamount: numeric
}

"""
order by min() on columns of table "billdetail"
"""
input billdetail_min_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemname: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""
response of any mutation on the table "billdetail"
"""
type billdetail_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [billdetail!]!
}

"""
on_conflict condition type for table "billdetail"
"""
input billdetail_on_conflict {
  constraint: billdetail_constraint!
  update_columns: [billdetail_update_column!]! = []
  where: billdetail_bool_exp
}

"""Ordering options when selecting data from "billdetail"."""
input billdetail_order_by {
  amount: order_by
  bill: bill_order_by
  billid: order_by
  id: order_by
  item: item_order_by
  itemid: order_by
  itemname: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""primary key columns input for table: billdetail"""
input billdetail_pk_columns_input {
  id: Int!
}

"""
select columns of table "billdetail"
"""
enum billdetail_select_column {
  """column name"""
  amount

  """column name"""
  billid

  """column name"""
  id

  """column name"""
  itemid

  """column name"""
  itemname

  """column name"""
  itemprice

  """column name"""
  quantity

  """column name"""
  subtotal

  """column name"""
  taxamount
}

"""
input type for updating data in table "billdetail"
"""
input billdetail_set_input {
  amount: numeric
  billid: Int
  id: Int
  itemid: Int
  itemname: String
  itemprice: numeric
  quantity: float8
  subtotal: numeric
  taxamount: numeric
}

"""aggregate stddev on columns"""
type billdetail_stddev_fields {
  amount: Float
  billid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
}

"""
order by stddev() on columns of table "billdetail"
"""
input billdetail_stddev_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""aggregate stddev_pop on columns"""
type billdetail_stddev_pop_fields {
  amount: Float
  billid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
}

"""
order by stddev_pop() on columns of table "billdetail"
"""
input billdetail_stddev_pop_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""aggregate stddev_samp on columns"""
type billdetail_stddev_samp_fields {
  amount: Float
  billid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
}

"""
order by stddev_samp() on columns of table "billdetail"
"""
input billdetail_stddev_samp_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""aggregate sum on columns"""
type billdetail_sum_fields {
  amount: numeric
  billid: Int
  id: Int
  itemid: Int
  itemprice: numeric
  quantity: float8
  subtotal: numeric
  taxamount: numeric
}

"""
order by sum() on columns of table "billdetail"
"""
input billdetail_sum_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""
update columns of table "billdetail"
"""
enum billdetail_update_column {
  """column name"""
  amount

  """column name"""
  billid

  """column name"""
  id

  """column name"""
  itemid

  """column name"""
  itemname

  """column name"""
  itemprice

  """column name"""
  quantity

  """column name"""
  subtotal

  """column name"""
  taxamount
}

"""aggregate var_pop on columns"""
type billdetail_var_pop_fields {
  amount: Float
  billid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
}

"""
order by var_pop() on columns of table "billdetail"
"""
input billdetail_var_pop_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""aggregate var_samp on columns"""
type billdetail_var_samp_fields {
  amount: Float
  billid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
}

"""
order by var_samp() on columns of table "billdetail"
"""
input billdetail_var_samp_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""aggregate variance on columns"""
type billdetail_variance_fields {
  amount: Float
  billid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
}

"""
order by variance() on columns of table "billdetail"
"""
input billdetail_variance_order_by {
  amount: order_by
  billid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
}

"""
columns and relationships of "billpayment"
"""
type billpayment {
  amountreceive: numeric!

  """An object relationship"""
  bill: bill!
  billid: Int!
  id: Int!

  """An object relationship"""
  paymentmethod: paymentmethod!
  paymentmethodid: Int!
  paymentmethodname: String!
}

"""
aggregated selection of "billpayment"
"""
type billpayment_aggregate {
  aggregate: billpayment_aggregate_fields
  nodes: [billpayment!]!
}

"""
aggregate fields of "billpayment"
"""
type billpayment_aggregate_fields {
  avg: billpayment_avg_fields
  count(columns: [billpayment_select_column!], distinct: Boolean): Int!
  max: billpayment_max_fields
  min: billpayment_min_fields
  stddev: billpayment_stddev_fields
  stddev_pop: billpayment_stddev_pop_fields
  stddev_samp: billpayment_stddev_samp_fields
  sum: billpayment_sum_fields
  var_pop: billpayment_var_pop_fields
  var_samp: billpayment_var_samp_fields
  variance: billpayment_variance_fields
}

"""
order by aggregate values of table "billpayment"
"""
input billpayment_aggregate_order_by {
  avg: billpayment_avg_order_by
  count: order_by
  max: billpayment_max_order_by
  min: billpayment_min_order_by
  stddev: billpayment_stddev_order_by
  stddev_pop: billpayment_stddev_pop_order_by
  stddev_samp: billpayment_stddev_samp_order_by
  sum: billpayment_sum_order_by
  var_pop: billpayment_var_pop_order_by
  var_samp: billpayment_var_samp_order_by
  variance: billpayment_variance_order_by
}

"""
input type for inserting array relation for remote table "billpayment"
"""
input billpayment_arr_rel_insert_input {
  data: [billpayment_insert_input!]!

  """upsert condition"""
  on_conflict: billpayment_on_conflict
}

"""aggregate avg on columns"""
type billpayment_avg_fields {
  amountreceive: Float
  billid: Float
  id: Float
  paymentmethodid: Float
}

"""
order by avg() on columns of table "billpayment"
"""
input billpayment_avg_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
}

"""
Boolean expression to filter rows from the table "billpayment". All fields are combined with a logical 'AND'.
"""
input billpayment_bool_exp {
  _and: [billpayment_bool_exp!]
  _not: billpayment_bool_exp
  _or: [billpayment_bool_exp!]
  amountreceive: numeric_comparison_exp
  bill: bill_bool_exp
  billid: Int_comparison_exp
  id: Int_comparison_exp
  paymentmethod: paymentmethod_bool_exp
  paymentmethodid: Int_comparison_exp
  paymentmethodname: String_comparison_exp
}

"""
unique or primary key constraints on table "billpayment"
"""
enum billpayment_constraint {
  """unique or primary key constraint"""
  billpayment_pkey
}

"""
input type for incrementing numeric columns in table "billpayment"
"""
input billpayment_inc_input {
  amountreceive: numeric
  billid: Int
  id: Int
  paymentmethodid: Int
}

"""
input type for inserting data into table "billpayment"
"""
input billpayment_insert_input {
  amountreceive: numeric
  bill: bill_obj_rel_insert_input
  billid: Int
  id: Int
  paymentmethod: paymentmethod_obj_rel_insert_input
  paymentmethodid: Int
  paymentmethodname: String
}

"""aggregate max on columns"""
type billpayment_max_fields {
  amountreceive: numeric
  billid: Int
  id: Int
  paymentmethodid: Int
  paymentmethodname: String
}

"""
order by max() on columns of table "billpayment"
"""
input billpayment_max_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
  paymentmethodname: order_by
}

"""aggregate min on columns"""
type billpayment_min_fields {
  amountreceive: numeric
  billid: Int
  id: Int
  paymentmethodid: Int
  paymentmethodname: String
}

"""
order by min() on columns of table "billpayment"
"""
input billpayment_min_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
  paymentmethodname: order_by
}

"""
response of any mutation on the table "billpayment"
"""
type billpayment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [billpayment!]!
}

"""
on_conflict condition type for table "billpayment"
"""
input billpayment_on_conflict {
  constraint: billpayment_constraint!
  update_columns: [billpayment_update_column!]! = []
  where: billpayment_bool_exp
}

"""Ordering options when selecting data from "billpayment"."""
input billpayment_order_by {
  amountreceive: order_by
  bill: bill_order_by
  billid: order_by
  id: order_by
  paymentmethod: paymentmethod_order_by
  paymentmethodid: order_by
  paymentmethodname: order_by
}

"""primary key columns input for table: billpayment"""
input billpayment_pk_columns_input {
  id: Int!
}

"""
select columns of table "billpayment"
"""
enum billpayment_select_column {
  """column name"""
  amountreceive

  """column name"""
  billid

  """column name"""
  id

  """column name"""
  paymentmethodid

  """column name"""
  paymentmethodname
}

"""
input type for updating data in table "billpayment"
"""
input billpayment_set_input {
  amountreceive: numeric
  billid: Int
  id: Int
  paymentmethodid: Int
  paymentmethodname: String
}

"""aggregate stddev on columns"""
type billpayment_stddev_fields {
  amountreceive: Float
  billid: Float
  id: Float
  paymentmethodid: Float
}

"""
order by stddev() on columns of table "billpayment"
"""
input billpayment_stddev_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
}

"""aggregate stddev_pop on columns"""
type billpayment_stddev_pop_fields {
  amountreceive: Float
  billid: Float
  id: Float
  paymentmethodid: Float
}

"""
order by stddev_pop() on columns of table "billpayment"
"""
input billpayment_stddev_pop_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
}

"""aggregate stddev_samp on columns"""
type billpayment_stddev_samp_fields {
  amountreceive: Float
  billid: Float
  id: Float
  paymentmethodid: Float
}

"""
order by stddev_samp() on columns of table "billpayment"
"""
input billpayment_stddev_samp_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
}

"""aggregate sum on columns"""
type billpayment_sum_fields {
  amountreceive: numeric
  billid: Int
  id: Int
  paymentmethodid: Int
}

"""
order by sum() on columns of table "billpayment"
"""
input billpayment_sum_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
}

"""
update columns of table "billpayment"
"""
enum billpayment_update_column {
  """column name"""
  amountreceive

  """column name"""
  billid

  """column name"""
  id

  """column name"""
  paymentmethodid

  """column name"""
  paymentmethodname
}

"""aggregate var_pop on columns"""
type billpayment_var_pop_fields {
  amountreceive: Float
  billid: Float
  id: Float
  paymentmethodid: Float
}

"""
order by var_pop() on columns of table "billpayment"
"""
input billpayment_var_pop_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
}

"""aggregate var_samp on columns"""
type billpayment_var_samp_fields {
  amountreceive: Float
  billid: Float
  id: Float
  paymentmethodid: Float
}

"""
order by var_samp() on columns of table "billpayment"
"""
input billpayment_var_samp_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
}

"""aggregate variance on columns"""
type billpayment_variance_fields {
  amountreceive: Float
  billid: Float
  id: Float
  paymentmethodid: Float
}

"""
order by variance() on columns of table "billpayment"
"""
input billpayment_variance_order_by {
  amountreceive: order_by
  billid: order_by
  id: order_by
  paymentmethodid: order_by
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "cashierlog"
"""
type cashierlog {
  """An object relationship"""
  account: account!
  accountid: Int!
  amount: numeric!
  creationtime: timestamp!
  id: Int!

  """An object relationship"""
  shift: shift!
  shiftid: Int!
  type: cashierlog_type!
  updaterid: Int
  updatetime: timestamp
}

"""
aggregated selection of "cashierlog"
"""
type cashierlog_aggregate {
  aggregate: cashierlog_aggregate_fields
  nodes: [cashierlog!]!
}

"""
aggregate fields of "cashierlog"
"""
type cashierlog_aggregate_fields {
  avg: cashierlog_avg_fields
  count(columns: [cashierlog_select_column!], distinct: Boolean): Int!
  max: cashierlog_max_fields
  min: cashierlog_min_fields
  stddev: cashierlog_stddev_fields
  stddev_pop: cashierlog_stddev_pop_fields
  stddev_samp: cashierlog_stddev_samp_fields
  sum: cashierlog_sum_fields
  var_pop: cashierlog_var_pop_fields
  var_samp: cashierlog_var_samp_fields
  variance: cashierlog_variance_fields
}

"""
order by aggregate values of table "cashierlog"
"""
input cashierlog_aggregate_order_by {
  avg: cashierlog_avg_order_by
  count: order_by
  max: cashierlog_max_order_by
  min: cashierlog_min_order_by
  stddev: cashierlog_stddev_order_by
  stddev_pop: cashierlog_stddev_pop_order_by
  stddev_samp: cashierlog_stddev_samp_order_by
  sum: cashierlog_sum_order_by
  var_pop: cashierlog_var_pop_order_by
  var_samp: cashierlog_var_samp_order_by
  variance: cashierlog_variance_order_by
}

"""
input type for inserting array relation for remote table "cashierlog"
"""
input cashierlog_arr_rel_insert_input {
  data: [cashierlog_insert_input!]!

  """upsert condition"""
  on_conflict: cashierlog_on_conflict
}

"""aggregate avg on columns"""
type cashierlog_avg_fields {
  accountid: Float
  amount: Float
  id: Float
  shiftid: Float
  updaterid: Float
}

"""
order by avg() on columns of table "cashierlog"
"""
input cashierlog_avg_order_by {
  accountid: order_by
  amount: order_by
  id: order_by
  shiftid: order_by
  updaterid: order_by
}

"""
Boolean expression to filter rows from the table "cashierlog". All fields are combined with a logical 'AND'.
"""
input cashierlog_bool_exp {
  _and: [cashierlog_bool_exp!]
  _not: cashierlog_bool_exp
  _or: [cashierlog_bool_exp!]
  account: account_bool_exp
  accountid: Int_comparison_exp
  amount: numeric_comparison_exp
  creationtime: timestamp_comparison_exp
  id: Int_comparison_exp
  shift: shift_bool_exp
  shiftid: Int_comparison_exp
  type: cashierlog_type_comparison_exp
  updaterid: Int_comparison_exp
  updatetime: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "cashierlog"
"""
enum cashierlog_constraint {
  """unique or primary key constraint"""
  cashierlog_pkey
}

"""
input type for incrementing numeric columns in table "cashierlog"
"""
input cashierlog_inc_input {
  accountid: Int
  amount: numeric
  id: Int
  shiftid: Int
  updaterid: Int
}

"""
input type for inserting data into table "cashierlog"
"""
input cashierlog_insert_input {
  account: account_obj_rel_insert_input
  accountid: Int
  amount: numeric
  creationtime: timestamp
  id: Int
  shift: shift_obj_rel_insert_input
  shiftid: Int
  type: cashierlog_type
  updaterid: Int
  updatetime: timestamp
}

"""aggregate max on columns"""
type cashierlog_max_fields {
  accountid: Int
  amount: numeric
  creationtime: timestamp
  id: Int
  shiftid: Int
  type: cashierlog_type
  updaterid: Int
  updatetime: timestamp
}

"""
order by max() on columns of table "cashierlog"
"""
input cashierlog_max_order_by {
  accountid: order_by
  amount: order_by
  creationtime: order_by
  id: order_by
  shiftid: order_by
  type: order_by
  updaterid: order_by
  updatetime: order_by
}

"""aggregate min on columns"""
type cashierlog_min_fields {
  accountid: Int
  amount: numeric
  creationtime: timestamp
  id: Int
  shiftid: Int
  type: cashierlog_type
  updaterid: Int
  updatetime: timestamp
}

"""
order by min() on columns of table "cashierlog"
"""
input cashierlog_min_order_by {
  accountid: order_by
  amount: order_by
  creationtime: order_by
  id: order_by
  shiftid: order_by
  type: order_by
  updaterid: order_by
  updatetime: order_by
}

"""
response of any mutation on the table "cashierlog"
"""
type cashierlog_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [cashierlog!]!
}

"""
on_conflict condition type for table "cashierlog"
"""
input cashierlog_on_conflict {
  constraint: cashierlog_constraint!
  update_columns: [cashierlog_update_column!]! = []
  where: cashierlog_bool_exp
}

"""Ordering options when selecting data from "cashierlog"."""
input cashierlog_order_by {
  account: account_order_by
  accountid: order_by
  amount: order_by
  creationtime: order_by
  id: order_by
  shift: shift_order_by
  shiftid: order_by
  type: order_by
  updaterid: order_by
  updatetime: order_by
}

"""primary key columns input for table: cashierlog"""
input cashierlog_pk_columns_input {
  id: Int!
}

"""
select columns of table "cashierlog"
"""
enum cashierlog_select_column {
  """column name"""
  accountid

  """column name"""
  amount

  """column name"""
  creationtime

  """column name"""
  id

  """column name"""
  shiftid

  """column name"""
  type

  """column name"""
  updaterid

  """column name"""
  updatetime
}

"""
input type for updating data in table "cashierlog"
"""
input cashierlog_set_input {
  accountid: Int
  amount: numeric
  creationtime: timestamp
  id: Int
  shiftid: Int
  type: cashierlog_type
  updaterid: Int
  updatetime: timestamp
}

"""aggregate stddev on columns"""
type cashierlog_stddev_fields {
  accountid: Float
  amount: Float
  id: Float
  shiftid: Float
  updaterid: Float
}

"""
order by stddev() on columns of table "cashierlog"
"""
input cashierlog_stddev_order_by {
  accountid: order_by
  amount: order_by
  id: order_by
  shiftid: order_by
  updaterid: order_by
}

"""aggregate stddev_pop on columns"""
type cashierlog_stddev_pop_fields {
  accountid: Float
  amount: Float
  id: Float
  shiftid: Float
  updaterid: Float
}

"""
order by stddev_pop() on columns of table "cashierlog"
"""
input cashierlog_stddev_pop_order_by {
  accountid: order_by
  amount: order_by
  id: order_by
  shiftid: order_by
  updaterid: order_by
}

"""aggregate stddev_samp on columns"""
type cashierlog_stddev_samp_fields {
  accountid: Float
  amount: Float
  id: Float
  shiftid: Float
  updaterid: Float
}

"""
order by stddev_samp() on columns of table "cashierlog"
"""
input cashierlog_stddev_samp_order_by {
  accountid: order_by
  amount: order_by
  id: order_by
  shiftid: order_by
  updaterid: order_by
}

"""aggregate sum on columns"""
type cashierlog_sum_fields {
  accountid: Int
  amount: numeric
  id: Int
  shiftid: Int
  updaterid: Int
}

"""
order by sum() on columns of table "cashierlog"
"""
input cashierlog_sum_order_by {
  accountid: order_by
  amount: order_by
  id: order_by
  shiftid: order_by
  updaterid: order_by
}

scalar cashierlog_type

"""
Boolean expression to compare columns of type "cashierlog_type". All fields are combined with logical 'AND'.
"""
input cashierlog_type_comparison_exp {
  _eq: cashierlog_type
  _gt: cashierlog_type
  _gte: cashierlog_type
  _in: [cashierlog_type!]
  _is_null: Boolean
  _lt: cashierlog_type
  _lte: cashierlog_type
  _neq: cashierlog_type
  _nin: [cashierlog_type!]
}

"""
update columns of table "cashierlog"
"""
enum cashierlog_update_column {
  """column name"""
  accountid

  """column name"""
  amount

  """column name"""
  creationtime

  """column name"""
  id

  """column name"""
  shiftid

  """column name"""
  type

  """column name"""
  updaterid

  """column name"""
  updatetime
}

"""aggregate var_pop on columns"""
type cashierlog_var_pop_fields {
  accountid: Float
  amount: Float
  id: Float
  shiftid: Float
  updaterid: Float
}

"""
order by var_pop() on columns of table "cashierlog"
"""
input cashierlog_var_pop_order_by {
  accountid: order_by
  amount: order_by
  id: order_by
  shiftid: order_by
  updaterid: order_by
}

"""aggregate var_samp on columns"""
type cashierlog_var_samp_fields {
  accountid: Float
  amount: Float
  id: Float
  shiftid: Float
  updaterid: Float
}

"""
order by var_samp() on columns of table "cashierlog"
"""
input cashierlog_var_samp_order_by {
  accountid: order_by
  amount: order_by
  id: order_by
  shiftid: order_by
  updaterid: order_by
}

"""aggregate variance on columns"""
type cashierlog_variance_fields {
  accountid: Float
  amount: Float
  id: Float
  shiftid: Float
  updaterid: Float
}

"""
order by variance() on columns of table "cashierlog"
"""
input cashierlog_variance_order_by {
  accountid: order_by
  amount: order_by
  id: order_by
  shiftid: order_by
  updaterid: order_by
}

"""
columns and relationships of "check"
"""
type check {
  """An object relationship"""
  account: account!
  accountid: Int!

  """An array relationship"""
  bills(
    """distinct select on columns"""
    distinct_on: [bill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bill_order_by!]

    """filter the rows returned"""
    where: bill_bool_exp
  ): [bill!]!

  """An aggregate relationship"""
  bills_aggregate(
    """distinct select on columns"""
    distinct_on: [bill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bill_order_by!]

    """filter the rows returned"""
    where: bill_bool_exp
  ): bill_aggregate!

  """An array relationship"""
  checkdetails(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): [checkdetail!]!

  """An aggregate relationship"""
  checkdetails_aggregate(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): checkdetail_aggregate!
  checkno: String!
  cover: Int
  creationtime: timestamp!
  creatorid: Int!
  guestname: String
  id: Int!
  note: String

  """An object relationship"""
  shift: shift!
  shiftid: Int!
  status: check_status!
  subtotal: numeric!

  """An object relationship"""
  table: table!
  tableid: Int!
  totalamount: numeric!
  totaltax: numeric!
  updaterid: Int
  updatetime: timestamp

  """An object relationship"""
  voidreason: voidreason
  voidreasonid: Int
}

"""
aggregated selection of "check"
"""
type check_aggregate {
  aggregate: check_aggregate_fields
  nodes: [check!]!
}

"""
aggregate fields of "check"
"""
type check_aggregate_fields {
  avg: check_avg_fields
  count(columns: [check_select_column!], distinct: Boolean): Int!
  max: check_max_fields
  min: check_min_fields
  stddev: check_stddev_fields
  stddev_pop: check_stddev_pop_fields
  stddev_samp: check_stddev_samp_fields
  sum: check_sum_fields
  var_pop: check_var_pop_fields
  var_samp: check_var_samp_fields
  variance: check_variance_fields
}

"""
order by aggregate values of table "check"
"""
input check_aggregate_order_by {
  avg: check_avg_order_by
  count: order_by
  max: check_max_order_by
  min: check_min_order_by
  stddev: check_stddev_order_by
  stddev_pop: check_stddev_pop_order_by
  stddev_samp: check_stddev_samp_order_by
  sum: check_sum_order_by
  var_pop: check_var_pop_order_by
  var_samp: check_var_samp_order_by
  variance: check_variance_order_by
}

"""
input type for inserting array relation for remote table "check"
"""
input check_arr_rel_insert_input {
  data: [check_insert_input!]!

  """upsert condition"""
  on_conflict: check_on_conflict
}

"""aggregate avg on columns"""
type check_avg_fields {
  accountid: Float
  cover: Float
  creatorid: Float
  id: Float
  shiftid: Float
  subtotal: Float
  tableid: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
  voidreasonid: Float
}

"""
order by avg() on columns of table "check"
"""
input check_avg_order_by {
  accountid: order_by
  cover: order_by
  creatorid: order_by
  id: order_by
  shiftid: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  voidreasonid: order_by
}

"""
Boolean expression to filter rows from the table "check". All fields are combined with a logical 'AND'.
"""
input check_bool_exp {
  _and: [check_bool_exp!]
  _not: check_bool_exp
  _or: [check_bool_exp!]
  account: account_bool_exp
  accountid: Int_comparison_exp
  bills: bill_bool_exp
  checkdetails: checkdetail_bool_exp
  checkno: String_comparison_exp
  cover: Int_comparison_exp
  creationtime: timestamp_comparison_exp
  creatorid: Int_comparison_exp
  guestname: String_comparison_exp
  id: Int_comparison_exp
  note: String_comparison_exp
  shift: shift_bool_exp
  shiftid: Int_comparison_exp
  status: check_status_comparison_exp
  subtotal: numeric_comparison_exp
  table: table_bool_exp
  tableid: Int_comparison_exp
  totalamount: numeric_comparison_exp
  totaltax: numeric_comparison_exp
  updaterid: Int_comparison_exp
  updatetime: timestamp_comparison_exp
  voidreason: voidreason_bool_exp
  voidreasonid: Int_comparison_exp
}

"""
unique or primary key constraints on table "check"
"""
enum check_constraint {
  """unique or primary key constraint"""
  check_checkno_key

  """unique or primary key constraint"""
  check_pkey
}

"""
input type for incrementing numeric columns in table "check"
"""
input check_inc_input {
  accountid: Int
  cover: Int
  creatorid: Int
  id: Int
  shiftid: Int
  subtotal: numeric
  tableid: Int
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  voidreasonid: Int
}

"""
input type for inserting data into table "check"
"""
input check_insert_input {
  account: account_obj_rel_insert_input
  accountid: Int
  bills: bill_arr_rel_insert_input
  checkdetails: checkdetail_arr_rel_insert_input
  checkno: String
  cover: Int
  creationtime: timestamp
  creatorid: Int
  guestname: String
  id: Int
  note: String
  shift: shift_obj_rel_insert_input
  shiftid: Int
  status: check_status
  subtotal: numeric
  table: table_obj_rel_insert_input
  tableid: Int
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  updatetime: timestamp
  voidreason: voidreason_obj_rel_insert_input
  voidreasonid: Int
}

"""aggregate max on columns"""
type check_max_fields {
  accountid: Int
  checkno: String
  cover: Int
  creationtime: timestamp
  creatorid: Int
  guestname: String
  id: Int
  note: String
  shiftid: Int
  status: check_status
  subtotal: numeric
  tableid: Int
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  updatetime: timestamp
  voidreasonid: Int
}

"""
order by max() on columns of table "check"
"""
input check_max_order_by {
  accountid: order_by
  checkno: order_by
  cover: order_by
  creationtime: order_by
  creatorid: order_by
  guestname: order_by
  id: order_by
  note: order_by
  shiftid: order_by
  status: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  updatetime: order_by
  voidreasonid: order_by
}

"""aggregate min on columns"""
type check_min_fields {
  accountid: Int
  checkno: String
  cover: Int
  creationtime: timestamp
  creatorid: Int
  guestname: String
  id: Int
  note: String
  shiftid: Int
  status: check_status
  subtotal: numeric
  tableid: Int
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  updatetime: timestamp
  voidreasonid: Int
}

"""
order by min() on columns of table "check"
"""
input check_min_order_by {
  accountid: order_by
  checkno: order_by
  cover: order_by
  creationtime: order_by
  creatorid: order_by
  guestname: order_by
  id: order_by
  note: order_by
  shiftid: order_by
  status: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  updatetime: order_by
  voidreasonid: order_by
}

"""
response of any mutation on the table "check"
"""
type check_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [check!]!
}

"""
input type for inserting object relation for remote table "check"
"""
input check_obj_rel_insert_input {
  data: check_insert_input!

  """upsert condition"""
  on_conflict: check_on_conflict
}

"""
on_conflict condition type for table "check"
"""
input check_on_conflict {
  constraint: check_constraint!
  update_columns: [check_update_column!]! = []
  where: check_bool_exp
}

"""Ordering options when selecting data from "check"."""
input check_order_by {
  account: account_order_by
  accountid: order_by
  bills_aggregate: bill_aggregate_order_by
  checkdetails_aggregate: checkdetail_aggregate_order_by
  checkno: order_by
  cover: order_by
  creationtime: order_by
  creatorid: order_by
  guestname: order_by
  id: order_by
  note: order_by
  shift: shift_order_by
  shiftid: order_by
  status: order_by
  subtotal: order_by
  table: table_order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  updatetime: order_by
  voidreason: voidreason_order_by
  voidreasonid: order_by
}

"""primary key columns input for table: check"""
input check_pk_columns_input {
  id: Int!
}

"""
select columns of table "check"
"""
enum check_select_column {
  """column name"""
  accountid

  """column name"""
  checkno

  """column name"""
  cover

  """column name"""
  creationtime

  """column name"""
  creatorid

  """column name"""
  guestname

  """column name"""
  id

  """column name"""
  note

  """column name"""
  shiftid

  """column name"""
  status

  """column name"""
  subtotal

  """column name"""
  tableid

  """column name"""
  totalamount

  """column name"""
  totaltax

  """column name"""
  updaterid

  """column name"""
  updatetime

  """column name"""
  voidreasonid
}

"""
input type for updating data in table "check"
"""
input check_set_input {
  accountid: Int
  checkno: String
  cover: Int
  creationtime: timestamp
  creatorid: Int
  guestname: String
  id: Int
  note: String
  shiftid: Int
  status: check_status
  subtotal: numeric
  tableid: Int
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  updatetime: timestamp
  voidreasonid: Int
}

scalar check_status

"""
Boolean expression to compare columns of type "check_status". All fields are combined with logical 'AND'.
"""
input check_status_comparison_exp {
  _eq: check_status
  _gt: check_status
  _gte: check_status
  _in: [check_status!]
  _is_null: Boolean
  _lt: check_status
  _lte: check_status
  _neq: check_status
  _nin: [check_status!]
}

"""aggregate stddev on columns"""
type check_stddev_fields {
  accountid: Float
  cover: Float
  creatorid: Float
  id: Float
  shiftid: Float
  subtotal: Float
  tableid: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
  voidreasonid: Float
}

"""
order by stddev() on columns of table "check"
"""
input check_stddev_order_by {
  accountid: order_by
  cover: order_by
  creatorid: order_by
  id: order_by
  shiftid: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  voidreasonid: order_by
}

"""aggregate stddev_pop on columns"""
type check_stddev_pop_fields {
  accountid: Float
  cover: Float
  creatorid: Float
  id: Float
  shiftid: Float
  subtotal: Float
  tableid: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
  voidreasonid: Float
}

"""
order by stddev_pop() on columns of table "check"
"""
input check_stddev_pop_order_by {
  accountid: order_by
  cover: order_by
  creatorid: order_by
  id: order_by
  shiftid: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  voidreasonid: order_by
}

"""aggregate stddev_samp on columns"""
type check_stddev_samp_fields {
  accountid: Float
  cover: Float
  creatorid: Float
  id: Float
  shiftid: Float
  subtotal: Float
  tableid: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
  voidreasonid: Float
}

"""
order by stddev_samp() on columns of table "check"
"""
input check_stddev_samp_order_by {
  accountid: order_by
  cover: order_by
  creatorid: order_by
  id: order_by
  shiftid: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  voidreasonid: order_by
}

"""aggregate sum on columns"""
type check_sum_fields {
  accountid: Int
  cover: Int
  creatorid: Int
  id: Int
  shiftid: Int
  subtotal: numeric
  tableid: Int
  totalamount: numeric
  totaltax: numeric
  updaterid: Int
  voidreasonid: Int
}

"""
order by sum() on columns of table "check"
"""
input check_sum_order_by {
  accountid: order_by
  cover: order_by
  creatorid: order_by
  id: order_by
  shiftid: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  voidreasonid: order_by
}

"""
update columns of table "check"
"""
enum check_update_column {
  """column name"""
  accountid

  """column name"""
  checkno

  """column name"""
  cover

  """column name"""
  creationtime

  """column name"""
  creatorid

  """column name"""
  guestname

  """column name"""
  id

  """column name"""
  note

  """column name"""
  shiftid

  """column name"""
  status

  """column name"""
  subtotal

  """column name"""
  tableid

  """column name"""
  totalamount

  """column name"""
  totaltax

  """column name"""
  updaterid

  """column name"""
  updatetime

  """column name"""
  voidreasonid
}

"""aggregate var_pop on columns"""
type check_var_pop_fields {
  accountid: Float
  cover: Float
  creatorid: Float
  id: Float
  shiftid: Float
  subtotal: Float
  tableid: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
  voidreasonid: Float
}

"""
order by var_pop() on columns of table "check"
"""
input check_var_pop_order_by {
  accountid: order_by
  cover: order_by
  creatorid: order_by
  id: order_by
  shiftid: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  voidreasonid: order_by
}

"""aggregate var_samp on columns"""
type check_var_samp_fields {
  accountid: Float
  cover: Float
  creatorid: Float
  id: Float
  shiftid: Float
  subtotal: Float
  tableid: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
  voidreasonid: Float
}

"""
order by var_samp() on columns of table "check"
"""
input check_var_samp_order_by {
  accountid: order_by
  cover: order_by
  creatorid: order_by
  id: order_by
  shiftid: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  voidreasonid: order_by
}

"""aggregate variance on columns"""
type check_variance_fields {
  accountid: Float
  cover: Float
  creatorid: Float
  id: Float
  shiftid: Float
  subtotal: Float
  tableid: Float
  totalamount: Float
  totaltax: Float
  updaterid: Float
  voidreasonid: Float
}

"""
order by variance() on columns of table "check"
"""
input check_variance_order_by {
  accountid: order_by
  cover: order_by
  creatorid: order_by
  id: order_by
  shiftid: order_by
  subtotal: order_by
  tableid: order_by
  totalamount: order_by
  totaltax: order_by
  updaterid: order_by
  voidreasonid: order_by
}

"""
columns and relationships of "checkdetail"
"""
type checkdetail {
  amount: numeric!

  """An object relationship"""
  check: check!

  """An array relationship"""
  checkdetailspecialrequests(
    """distinct select on columns"""
    distinct_on: [checkdetailspecialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetailspecialrequest_order_by!]

    """filter the rows returned"""
    where: checkdetailspecialrequest_bool_exp
  ): [checkdetailspecialrequest!]!

  """An aggregate relationship"""
  checkdetailspecialrequests_aggregate(
    """distinct select on columns"""
    distinct_on: [checkdetailspecialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetailspecialrequest_order_by!]

    """filter the rows returned"""
    where: checkdetailspecialrequest_bool_exp
  ): checkdetailspecialrequest_aggregate!
  checkid: Int!
  completiontime: time
  id: Int!
  isreminded: Boolean!

  """An object relationship"""
  item: item!
  itemid: Int!
  itemprice: numeric!
  note: String
  quantity: float8!
  starttime: time!
  status: checkdetail_status!
  subtotal: numeric!
  taxamount: numeric!

  """An object relationship"""
  voidreason: voidreason
  voidreasonid: Int
}

"""
aggregated selection of "checkdetail"
"""
type checkdetail_aggregate {
  aggregate: checkdetail_aggregate_fields
  nodes: [checkdetail!]!
}

"""
aggregate fields of "checkdetail"
"""
type checkdetail_aggregate_fields {
  avg: checkdetail_avg_fields
  count(columns: [checkdetail_select_column!], distinct: Boolean): Int!
  max: checkdetail_max_fields
  min: checkdetail_min_fields
  stddev: checkdetail_stddev_fields
  stddev_pop: checkdetail_stddev_pop_fields
  stddev_samp: checkdetail_stddev_samp_fields
  sum: checkdetail_sum_fields
  var_pop: checkdetail_var_pop_fields
  var_samp: checkdetail_var_samp_fields
  variance: checkdetail_variance_fields
}

"""
order by aggregate values of table "checkdetail"
"""
input checkdetail_aggregate_order_by {
  avg: checkdetail_avg_order_by
  count: order_by
  max: checkdetail_max_order_by
  min: checkdetail_min_order_by
  stddev: checkdetail_stddev_order_by
  stddev_pop: checkdetail_stddev_pop_order_by
  stddev_samp: checkdetail_stddev_samp_order_by
  sum: checkdetail_sum_order_by
  var_pop: checkdetail_var_pop_order_by
  var_samp: checkdetail_var_samp_order_by
  variance: checkdetail_variance_order_by
}

"""
input type for inserting array relation for remote table "checkdetail"
"""
input checkdetail_arr_rel_insert_input {
  data: [checkdetail_insert_input!]!

  """upsert condition"""
  on_conflict: checkdetail_on_conflict
}

"""aggregate avg on columns"""
type checkdetail_avg_fields {
  amount: Float
  checkid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
  voidreasonid: Float
}

"""
order by avg() on columns of table "checkdetail"
"""
input checkdetail_avg_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""
Boolean expression to filter rows from the table "checkdetail". All fields are combined with a logical 'AND'.
"""
input checkdetail_bool_exp {
  _and: [checkdetail_bool_exp!]
  _not: checkdetail_bool_exp
  _or: [checkdetail_bool_exp!]
  amount: numeric_comparison_exp
  check: check_bool_exp
  checkdetailspecialrequests: checkdetailspecialrequest_bool_exp
  checkid: Int_comparison_exp
  completiontime: time_comparison_exp
  id: Int_comparison_exp
  isreminded: Boolean_comparison_exp
  item: item_bool_exp
  itemid: Int_comparison_exp
  itemprice: numeric_comparison_exp
  note: String_comparison_exp
  quantity: float8_comparison_exp
  starttime: time_comparison_exp
  status: checkdetail_status_comparison_exp
  subtotal: numeric_comparison_exp
  taxamount: numeric_comparison_exp
  voidreason: voidreason_bool_exp
  voidreasonid: Int_comparison_exp
}

"""
unique or primary key constraints on table "checkdetail"
"""
enum checkdetail_constraint {
  """unique or primary key constraint"""
  checkdetail_pkey
}

"""
input type for incrementing numeric columns in table "checkdetail"
"""
input checkdetail_inc_input {
  amount: numeric
  checkid: Int
  id: Int
  itemid: Int
  itemprice: numeric
  quantity: float8
  subtotal: numeric
  taxamount: numeric
  voidreasonid: Int
}

"""
input type for inserting data into table "checkdetail"
"""
input checkdetail_insert_input {
  amount: numeric
  check: check_obj_rel_insert_input
  checkdetailspecialrequests: checkdetailspecialrequest_arr_rel_insert_input
  checkid: Int
  completiontime: time
  id: Int
  isreminded: Boolean
  item: item_obj_rel_insert_input
  itemid: Int
  itemprice: numeric
  note: String
  quantity: float8
  starttime: time
  status: checkdetail_status
  subtotal: numeric
  taxamount: numeric
  voidreason: voidreason_obj_rel_insert_input
  voidreasonid: Int
}

"""aggregate max on columns"""
type checkdetail_max_fields {
  amount: numeric
  checkid: Int
  id: Int
  itemid: Int
  itemprice: numeric
  note: String
  quantity: float8
  status: checkdetail_status
  subtotal: numeric
  taxamount: numeric
  voidreasonid: Int
}

"""
order by max() on columns of table "checkdetail"
"""
input checkdetail_max_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  note: order_by
  quantity: order_by
  status: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""aggregate min on columns"""
type checkdetail_min_fields {
  amount: numeric
  checkid: Int
  id: Int
  itemid: Int
  itemprice: numeric
  note: String
  quantity: float8
  status: checkdetail_status
  subtotal: numeric
  taxamount: numeric
  voidreasonid: Int
}

"""
order by min() on columns of table "checkdetail"
"""
input checkdetail_min_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  note: order_by
  quantity: order_by
  status: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""
response of any mutation on the table "checkdetail"
"""
type checkdetail_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [checkdetail!]!
}

"""
input type for inserting object relation for remote table "checkdetail"
"""
input checkdetail_obj_rel_insert_input {
  data: checkdetail_insert_input!

  """upsert condition"""
  on_conflict: checkdetail_on_conflict
}

"""
on_conflict condition type for table "checkdetail"
"""
input checkdetail_on_conflict {
  constraint: checkdetail_constraint!
  update_columns: [checkdetail_update_column!]! = []
  where: checkdetail_bool_exp
}

"""Ordering options when selecting data from "checkdetail"."""
input checkdetail_order_by {
  amount: order_by
  check: check_order_by
  checkdetailspecialrequests_aggregate: checkdetailspecialrequest_aggregate_order_by
  checkid: order_by
  completiontime: order_by
  id: order_by
  isreminded: order_by
  item: item_order_by
  itemid: order_by
  itemprice: order_by
  note: order_by
  quantity: order_by
  starttime: order_by
  status: order_by
  subtotal: order_by
  taxamount: order_by
  voidreason: voidreason_order_by
  voidreasonid: order_by
}

"""primary key columns input for table: checkdetail"""
input checkdetail_pk_columns_input {
  id: Int!
}

"""
select columns of table "checkdetail"
"""
enum checkdetail_select_column {
  """column name"""
  amount

  """column name"""
  checkid

  """column name"""
  completiontime

  """column name"""
  id

  """column name"""
  isreminded

  """column name"""
  itemid

  """column name"""
  itemprice

  """column name"""
  note

  """column name"""
  quantity

  """column name"""
  starttime

  """column name"""
  status

  """column name"""
  subtotal

  """column name"""
  taxamount

  """column name"""
  voidreasonid
}

"""
input type for updating data in table "checkdetail"
"""
input checkdetail_set_input {
  amount: numeric
  checkid: Int
  completiontime: time
  id: Int
  isreminded: Boolean
  itemid: Int
  itemprice: numeric
  note: String
  quantity: float8
  starttime: time
  status: checkdetail_status
  subtotal: numeric
  taxamount: numeric
  voidreasonid: Int
}

scalar checkdetail_status

"""
Boolean expression to compare columns of type "checkdetail_status". All fields are combined with logical 'AND'.
"""
input checkdetail_status_comparison_exp {
  _eq: checkdetail_status
  _gt: checkdetail_status
  _gte: checkdetail_status
  _in: [checkdetail_status!]
  _is_null: Boolean
  _lt: checkdetail_status
  _lte: checkdetail_status
  _neq: checkdetail_status
  _nin: [checkdetail_status!]
}

"""aggregate stddev on columns"""
type checkdetail_stddev_fields {
  amount: Float
  checkid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
  voidreasonid: Float
}

"""
order by stddev() on columns of table "checkdetail"
"""
input checkdetail_stddev_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""aggregate stddev_pop on columns"""
type checkdetail_stddev_pop_fields {
  amount: Float
  checkid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
  voidreasonid: Float
}

"""
order by stddev_pop() on columns of table "checkdetail"
"""
input checkdetail_stddev_pop_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""aggregate stddev_samp on columns"""
type checkdetail_stddev_samp_fields {
  amount: Float
  checkid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
  voidreasonid: Float
}

"""
order by stddev_samp() on columns of table "checkdetail"
"""
input checkdetail_stddev_samp_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""aggregate sum on columns"""
type checkdetail_sum_fields {
  amount: numeric
  checkid: Int
  id: Int
  itemid: Int
  itemprice: numeric
  quantity: float8
  subtotal: numeric
  taxamount: numeric
  voidreasonid: Int
}

"""
order by sum() on columns of table "checkdetail"
"""
input checkdetail_sum_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""
update columns of table "checkdetail"
"""
enum checkdetail_update_column {
  """column name"""
  amount

  """column name"""
  checkid

  """column name"""
  completiontime

  """column name"""
  id

  """column name"""
  isreminded

  """column name"""
  itemid

  """column name"""
  itemprice

  """column name"""
  note

  """column name"""
  quantity

  """column name"""
  starttime

  """column name"""
  status

  """column name"""
  subtotal

  """column name"""
  taxamount

  """column name"""
  voidreasonid
}

"""aggregate var_pop on columns"""
type checkdetail_var_pop_fields {
  amount: Float
  checkid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
  voidreasonid: Float
}

"""
order by var_pop() on columns of table "checkdetail"
"""
input checkdetail_var_pop_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""aggregate var_samp on columns"""
type checkdetail_var_samp_fields {
  amount: Float
  checkid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
  voidreasonid: Float
}

"""
order by var_samp() on columns of table "checkdetail"
"""
input checkdetail_var_samp_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""aggregate variance on columns"""
type checkdetail_variance_fields {
  amount: Float
  checkid: Float
  id: Float
  itemid: Float
  itemprice: Float
  quantity: Float
  subtotal: Float
  taxamount: Float
  voidreasonid: Float
}

"""
order by variance() on columns of table "checkdetail"
"""
input checkdetail_variance_order_by {
  amount: order_by
  checkid: order_by
  id: order_by
  itemid: order_by
  itemprice: order_by
  quantity: order_by
  subtotal: order_by
  taxamount: order_by
  voidreasonid: order_by
}

"""
columns and relationships of "checkdetailspecialrequest"
"""
type checkdetailspecialrequest {
  """An object relationship"""
  checkdetail: checkdetail!
  checkdetailid: Int!
  id: Int!

  """An object relationship"""
  specialrequest: specialrequest!
  specialrequestid: Int!
}

"""
aggregated selection of "checkdetailspecialrequest"
"""
type checkdetailspecialrequest_aggregate {
  aggregate: checkdetailspecialrequest_aggregate_fields
  nodes: [checkdetailspecialrequest!]!
}

"""
aggregate fields of "checkdetailspecialrequest"
"""
type checkdetailspecialrequest_aggregate_fields {
  avg: checkdetailspecialrequest_avg_fields
  count(columns: [checkdetailspecialrequest_select_column!], distinct: Boolean): Int!
  max: checkdetailspecialrequest_max_fields
  min: checkdetailspecialrequest_min_fields
  stddev: checkdetailspecialrequest_stddev_fields
  stddev_pop: checkdetailspecialrequest_stddev_pop_fields
  stddev_samp: checkdetailspecialrequest_stddev_samp_fields
  sum: checkdetailspecialrequest_sum_fields
  var_pop: checkdetailspecialrequest_var_pop_fields
  var_samp: checkdetailspecialrequest_var_samp_fields
  variance: checkdetailspecialrequest_variance_fields
}

"""
order by aggregate values of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_aggregate_order_by {
  avg: checkdetailspecialrequest_avg_order_by
  count: order_by
  max: checkdetailspecialrequest_max_order_by
  min: checkdetailspecialrequest_min_order_by
  stddev: checkdetailspecialrequest_stddev_order_by
  stddev_pop: checkdetailspecialrequest_stddev_pop_order_by
  stddev_samp: checkdetailspecialrequest_stddev_samp_order_by
  sum: checkdetailspecialrequest_sum_order_by
  var_pop: checkdetailspecialrequest_var_pop_order_by
  var_samp: checkdetailspecialrequest_var_samp_order_by
  variance: checkdetailspecialrequest_variance_order_by
}

"""
input type for inserting array relation for remote table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_arr_rel_insert_input {
  data: [checkdetailspecialrequest_insert_input!]!

  """upsert condition"""
  on_conflict: checkdetailspecialrequest_on_conflict
}

"""aggregate avg on columns"""
type checkdetailspecialrequest_avg_fields {
  checkdetailid: Float
  id: Float
  specialrequestid: Float
}

"""
order by avg() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_avg_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

"""
Boolean expression to filter rows from the table "checkdetailspecialrequest". All fields are combined with a logical 'AND'.
"""
input checkdetailspecialrequest_bool_exp {
  _and: [checkdetailspecialrequest_bool_exp!]
  _not: checkdetailspecialrequest_bool_exp
  _or: [checkdetailspecialrequest_bool_exp!]
  checkdetail: checkdetail_bool_exp
  checkdetailid: Int_comparison_exp
  id: Int_comparison_exp
  specialrequest: specialrequest_bool_exp
  specialrequestid: Int_comparison_exp
}

"""
unique or primary key constraints on table "checkdetailspecialrequest"
"""
enum checkdetailspecialrequest_constraint {
  """unique or primary key constraint"""
  checkdetailspecialrequest_pkey
}

"""
input type for incrementing numeric columns in table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_inc_input {
  checkdetailid: Int
  id: Int
  specialrequestid: Int
}

"""
input type for inserting data into table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_insert_input {
  checkdetail: checkdetail_obj_rel_insert_input
  checkdetailid: Int
  id: Int
  specialrequest: specialrequest_obj_rel_insert_input
  specialrequestid: Int
}

"""aggregate max on columns"""
type checkdetailspecialrequest_max_fields {
  checkdetailid: Int
  id: Int
  specialrequestid: Int
}

"""
order by max() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_max_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

"""aggregate min on columns"""
type checkdetailspecialrequest_min_fields {
  checkdetailid: Int
  id: Int
  specialrequestid: Int
}

"""
order by min() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_min_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

"""
response of any mutation on the table "checkdetailspecialrequest"
"""
type checkdetailspecialrequest_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [checkdetailspecialrequest!]!
}

"""
on_conflict condition type for table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_on_conflict {
  constraint: checkdetailspecialrequest_constraint!
  update_columns: [checkdetailspecialrequest_update_column!]! = []
  where: checkdetailspecialrequest_bool_exp
}

"""Ordering options when selecting data from "checkdetailspecialrequest"."""
input checkdetailspecialrequest_order_by {
  checkdetail: checkdetail_order_by
  checkdetailid: order_by
  id: order_by
  specialrequest: specialrequest_order_by
  specialrequestid: order_by
}

"""primary key columns input for table: checkdetailspecialrequest"""
input checkdetailspecialrequest_pk_columns_input {
  id: Int!
}

"""
select columns of table "checkdetailspecialrequest"
"""
enum checkdetailspecialrequest_select_column {
  """column name"""
  checkdetailid

  """column name"""
  id

  """column name"""
  specialrequestid
}

"""
input type for updating data in table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_set_input {
  checkdetailid: Int
  id: Int
  specialrequestid: Int
}

"""aggregate stddev on columns"""
type checkdetailspecialrequest_stddev_fields {
  checkdetailid: Float
  id: Float
  specialrequestid: Float
}

"""
order by stddev() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_stddev_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

"""aggregate stddev_pop on columns"""
type checkdetailspecialrequest_stddev_pop_fields {
  checkdetailid: Float
  id: Float
  specialrequestid: Float
}

"""
order by stddev_pop() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_stddev_pop_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

"""aggregate stddev_samp on columns"""
type checkdetailspecialrequest_stddev_samp_fields {
  checkdetailid: Float
  id: Float
  specialrequestid: Float
}

"""
order by stddev_samp() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_stddev_samp_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

"""aggregate sum on columns"""
type checkdetailspecialrequest_sum_fields {
  checkdetailid: Int
  id: Int
  specialrequestid: Int
}

"""
order by sum() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_sum_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

"""
update columns of table "checkdetailspecialrequest"
"""
enum checkdetailspecialrequest_update_column {
  """column name"""
  checkdetailid

  """column name"""
  id

  """column name"""
  specialrequestid
}

"""aggregate var_pop on columns"""
type checkdetailspecialrequest_var_pop_fields {
  checkdetailid: Float
  id: Float
  specialrequestid: Float
}

"""
order by var_pop() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_var_pop_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

"""aggregate var_samp on columns"""
type checkdetailspecialrequest_var_samp_fields {
  checkdetailid: Float
  id: Float
  specialrequestid: Float
}

"""
order by var_samp() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_var_samp_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

"""aggregate variance on columns"""
type checkdetailspecialrequest_variance_fields {
  checkdetailid: Float
  id: Float
  specialrequestid: Float
}

"""
order by variance() on columns of table "checkdetailspecialrequest"
"""
input checkdetailspecialrequest_variance_order_by {
  checkdetailid: order_by
  id: order_by
  specialrequestid: order_by
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "item"
"""
type item {
  """An array relationship"""
  billdetails(
    """distinct select on columns"""
    distinct_on: [billdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billdetail_order_by!]

    """filter the rows returned"""
    where: billdetail_bool_exp
  ): [billdetail!]!

  """An aggregate relationship"""
  billdetails_aggregate(
    """distinct select on columns"""
    distinct_on: [billdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billdetail_order_by!]

    """filter the rows returned"""
    where: billdetail_bool_exp
  ): billdetail_aggregate!

  """An array relationship"""
  checkdetails(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): [checkdetail!]!

  """An aggregate relationship"""
  checkdetails_aggregate(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): checkdetail_aggregate!
  id: Int!
  image: String

  """An object relationship"""
  itemoutofstock: itemoutofstock

  """An object relationship"""
  majorgroup: majorgroup!
  majorgroupid: Int!

  """An array relationship"""
  menuitems(
    """distinct select on columns"""
    distinct_on: [menuitem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menuitem_order_by!]

    """filter the rows returned"""
    where: menuitem_bool_exp
  ): [menuitem!]!

  """An aggregate relationship"""
  menuitems_aggregate(
    """distinct select on columns"""
    distinct_on: [menuitem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menuitem_order_by!]

    """filter the rows returned"""
    where: menuitem_bool_exp
  ): menuitem_aggregate!
  name: String!
  status: basic_status!
}

"""
aggregated selection of "item"
"""
type item_aggregate {
  aggregate: item_aggregate_fields
  nodes: [item!]!
}

"""
aggregate fields of "item"
"""
type item_aggregate_fields {
  avg: item_avg_fields
  count(columns: [item_select_column!], distinct: Boolean): Int!
  max: item_max_fields
  min: item_min_fields
  stddev: item_stddev_fields
  stddev_pop: item_stddev_pop_fields
  stddev_samp: item_stddev_samp_fields
  sum: item_sum_fields
  var_pop: item_var_pop_fields
  var_samp: item_var_samp_fields
  variance: item_variance_fields
}

"""
order by aggregate values of table "item"
"""
input item_aggregate_order_by {
  avg: item_avg_order_by
  count: order_by
  max: item_max_order_by
  min: item_min_order_by
  stddev: item_stddev_order_by
  stddev_pop: item_stddev_pop_order_by
  stddev_samp: item_stddev_samp_order_by
  sum: item_sum_order_by
  var_pop: item_var_pop_order_by
  var_samp: item_var_samp_order_by
  variance: item_variance_order_by
}

"""
input type for inserting array relation for remote table "item"
"""
input item_arr_rel_insert_input {
  data: [item_insert_input!]!

  """upsert condition"""
  on_conflict: item_on_conflict
}

"""aggregate avg on columns"""
type item_avg_fields {
  id: Float
  majorgroupid: Float
}

"""
order by avg() on columns of table "item"
"""
input item_avg_order_by {
  id: order_by
  majorgroupid: order_by
}

"""
Boolean expression to filter rows from the table "item". All fields are combined with a logical 'AND'.
"""
input item_bool_exp {
  _and: [item_bool_exp!]
  _not: item_bool_exp
  _or: [item_bool_exp!]
  billdetails: billdetail_bool_exp
  checkdetails: checkdetail_bool_exp
  id: Int_comparison_exp
  image: String_comparison_exp
  itemoutofstock: itemoutofstock_bool_exp
  majorgroup: majorgroup_bool_exp
  majorgroupid: Int_comparison_exp
  menuitems: menuitem_bool_exp
  name: String_comparison_exp
  status: basic_status_comparison_exp
}

"""
unique or primary key constraints on table "item"
"""
enum item_constraint {
  """unique or primary key constraint"""
  item_pkey
}

"""
input type for incrementing numeric columns in table "item"
"""
input item_inc_input {
  id: Int
  majorgroupid: Int
}

"""
input type for inserting data into table "item"
"""
input item_insert_input {
  billdetails: billdetail_arr_rel_insert_input
  checkdetails: checkdetail_arr_rel_insert_input
  id: Int
  image: String
  itemoutofstock: itemoutofstock_obj_rel_insert_input
  majorgroup: majorgroup_obj_rel_insert_input
  majorgroupid: Int
  menuitems: menuitem_arr_rel_insert_input
  name: String
  status: basic_status
}

"""aggregate max on columns"""
type item_max_fields {
  id: Int
  image: String
  majorgroupid: Int
  name: String
  status: basic_status
}

"""
order by max() on columns of table "item"
"""
input item_max_order_by {
  id: order_by
  image: order_by
  majorgroupid: order_by
  name: order_by
  status: order_by
}

"""aggregate min on columns"""
type item_min_fields {
  id: Int
  image: String
  majorgroupid: Int
  name: String
  status: basic_status
}

"""
order by min() on columns of table "item"
"""
input item_min_order_by {
  id: order_by
  image: order_by
  majorgroupid: order_by
  name: order_by
  status: order_by
}

"""
response of any mutation on the table "item"
"""
type item_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [item!]!
}

"""
input type for inserting object relation for remote table "item"
"""
input item_obj_rel_insert_input {
  data: item_insert_input!

  """upsert condition"""
  on_conflict: item_on_conflict
}

"""
on_conflict condition type for table "item"
"""
input item_on_conflict {
  constraint: item_constraint!
  update_columns: [item_update_column!]! = []
  where: item_bool_exp
}

"""Ordering options when selecting data from "item"."""
input item_order_by {
  billdetails_aggregate: billdetail_aggregate_order_by
  checkdetails_aggregate: checkdetail_aggregate_order_by
  id: order_by
  image: order_by
  itemoutofstock: itemoutofstock_order_by
  majorgroup: majorgroup_order_by
  majorgroupid: order_by
  menuitems_aggregate: menuitem_aggregate_order_by
  name: order_by
  status: order_by
}

"""primary key columns input for table: item"""
input item_pk_columns_input {
  id: Int!
}

"""
select columns of table "item"
"""
enum item_select_column {
  """column name"""
  id

  """column name"""
  image

  """column name"""
  majorgroupid

  """column name"""
  name

  """column name"""
  status
}

"""
input type for updating data in table "item"
"""
input item_set_input {
  id: Int
  image: String
  majorgroupid: Int
  name: String
  status: basic_status
}

"""aggregate stddev on columns"""
type item_stddev_fields {
  id: Float
  majorgroupid: Float
}

"""
order by stddev() on columns of table "item"
"""
input item_stddev_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate stddev_pop on columns"""
type item_stddev_pop_fields {
  id: Float
  majorgroupid: Float
}

"""
order by stddev_pop() on columns of table "item"
"""
input item_stddev_pop_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate stddev_samp on columns"""
type item_stddev_samp_fields {
  id: Float
  majorgroupid: Float
}

"""
order by stddev_samp() on columns of table "item"
"""
input item_stddev_samp_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate sum on columns"""
type item_sum_fields {
  id: Int
  majorgroupid: Int
}

"""
order by sum() on columns of table "item"
"""
input item_sum_order_by {
  id: order_by
  majorgroupid: order_by
}

"""
update columns of table "item"
"""
enum item_update_column {
  """column name"""
  id

  """column name"""
  image

  """column name"""
  majorgroupid

  """column name"""
  name

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type item_var_pop_fields {
  id: Float
  majorgroupid: Float
}

"""
order by var_pop() on columns of table "item"
"""
input item_var_pop_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate var_samp on columns"""
type item_var_samp_fields {
  id: Float
  majorgroupid: Float
}

"""
order by var_samp() on columns of table "item"
"""
input item_var_samp_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate variance on columns"""
type item_variance_fields {
  id: Float
  majorgroupid: Float
}

"""
order by variance() on columns of table "item"
"""
input item_variance_order_by {
  id: order_by
  majorgroupid: order_by
}

"""
columns and relationships of "itemoutofstock"
"""
type itemoutofstock {
  id: Int!

  """An object relationship"""
  item: item!
  itemid: Int!
}

"""
aggregated selection of "itemoutofstock"
"""
type itemoutofstock_aggregate {
  aggregate: itemoutofstock_aggregate_fields
  nodes: [itemoutofstock!]!
}

"""
aggregate fields of "itemoutofstock"
"""
type itemoutofstock_aggregate_fields {
  avg: itemoutofstock_avg_fields
  count(columns: [itemoutofstock_select_column!], distinct: Boolean): Int!
  max: itemoutofstock_max_fields
  min: itemoutofstock_min_fields
  stddev: itemoutofstock_stddev_fields
  stddev_pop: itemoutofstock_stddev_pop_fields
  stddev_samp: itemoutofstock_stddev_samp_fields
  sum: itemoutofstock_sum_fields
  var_pop: itemoutofstock_var_pop_fields
  var_samp: itemoutofstock_var_samp_fields
  variance: itemoutofstock_variance_fields
}

"""aggregate avg on columns"""
type itemoutofstock_avg_fields {
  id: Float
  itemid: Float
}

"""
Boolean expression to filter rows from the table "itemoutofstock". All fields are combined with a logical 'AND'.
"""
input itemoutofstock_bool_exp {
  _and: [itemoutofstock_bool_exp!]
  _not: itemoutofstock_bool_exp
  _or: [itemoutofstock_bool_exp!]
  id: Int_comparison_exp
  item: item_bool_exp
  itemid: Int_comparison_exp
}

"""
unique or primary key constraints on table "itemoutofstock"
"""
enum itemoutofstock_constraint {
  """unique or primary key constraint"""
  itemoutofstock_itemid_key

  """unique or primary key constraint"""
  itemoutofstock_pkey
}

"""
input type for incrementing numeric columns in table "itemoutofstock"
"""
input itemoutofstock_inc_input {
  id: Int
  itemid: Int
}

"""
input type for inserting data into table "itemoutofstock"
"""
input itemoutofstock_insert_input {
  id: Int
  item: item_obj_rel_insert_input
  itemid: Int
}

"""aggregate max on columns"""
type itemoutofstock_max_fields {
  id: Int
  itemid: Int
}

"""aggregate min on columns"""
type itemoutofstock_min_fields {
  id: Int
  itemid: Int
}

"""
response of any mutation on the table "itemoutofstock"
"""
type itemoutofstock_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [itemoutofstock!]!
}

"""
input type for inserting object relation for remote table "itemoutofstock"
"""
input itemoutofstock_obj_rel_insert_input {
  data: itemoutofstock_insert_input!

  """upsert condition"""
  on_conflict: itemoutofstock_on_conflict
}

"""
on_conflict condition type for table "itemoutofstock"
"""
input itemoutofstock_on_conflict {
  constraint: itemoutofstock_constraint!
  update_columns: [itemoutofstock_update_column!]! = []
  where: itemoutofstock_bool_exp
}

"""Ordering options when selecting data from "itemoutofstock"."""
input itemoutofstock_order_by {
  id: order_by
  item: item_order_by
  itemid: order_by
}

"""primary key columns input for table: itemoutofstock"""
input itemoutofstock_pk_columns_input {
  id: Int!
}

"""
select columns of table "itemoutofstock"
"""
enum itemoutofstock_select_column {
  """column name"""
  id

  """column name"""
  itemid
}

"""
input type for updating data in table "itemoutofstock"
"""
input itemoutofstock_set_input {
  id: Int
  itemid: Int
}

"""aggregate stddev on columns"""
type itemoutofstock_stddev_fields {
  id: Float
  itemid: Float
}

"""aggregate stddev_pop on columns"""
type itemoutofstock_stddev_pop_fields {
  id: Float
  itemid: Float
}

"""aggregate stddev_samp on columns"""
type itemoutofstock_stddev_samp_fields {
  id: Float
  itemid: Float
}

"""aggregate sum on columns"""
type itemoutofstock_sum_fields {
  id: Int
  itemid: Int
}

"""
update columns of table "itemoutofstock"
"""
enum itemoutofstock_update_column {
  """column name"""
  id

  """column name"""
  itemid
}

"""aggregate var_pop on columns"""
type itemoutofstock_var_pop_fields {
  id: Float
  itemid: Float
}

"""aggregate var_samp on columns"""
type itemoutofstock_var_samp_fields {
  id: Float
  itemid: Float
}

"""aggregate variance on columns"""
type itemoutofstock_variance_fields {
  id: Float
  itemid: Float
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

"""
columns and relationships of "location"
"""
type location {
  id: Int!
  name: String!
  status: basic_status

  """An array relationship"""
  tables(
    """distinct select on columns"""
    distinct_on: [table_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [table_order_by!]

    """filter the rows returned"""
    where: table_bool_exp
  ): [table!]!

  """An aggregate relationship"""
  tables_aggregate(
    """distinct select on columns"""
    distinct_on: [table_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [table_order_by!]

    """filter the rows returned"""
    where: table_bool_exp
  ): table_aggregate!
}

"""
aggregated selection of "location"
"""
type location_aggregate {
  aggregate: location_aggregate_fields
  nodes: [location!]!
}

"""
aggregate fields of "location"
"""
type location_aggregate_fields {
  avg: location_avg_fields
  count(columns: [location_select_column!], distinct: Boolean): Int!
  max: location_max_fields
  min: location_min_fields
  stddev: location_stddev_fields
  stddev_pop: location_stddev_pop_fields
  stddev_samp: location_stddev_samp_fields
  sum: location_sum_fields
  var_pop: location_var_pop_fields
  var_samp: location_var_samp_fields
  variance: location_variance_fields
}

"""aggregate avg on columns"""
type location_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "location". All fields are combined with a logical 'AND'.
"""
input location_bool_exp {
  _and: [location_bool_exp!]
  _not: location_bool_exp
  _or: [location_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
  status: basic_status_comparison_exp
  tables: table_bool_exp
}

"""
unique or primary key constraints on table "location"
"""
enum location_constraint {
  """unique or primary key constraint"""
  location_pkey
}

"""
input type for incrementing numeric columns in table "location"
"""
input location_inc_input {
  id: Int
}

"""
input type for inserting data into table "location"
"""
input location_insert_input {
  id: Int
  name: String
  status: basic_status
  tables: table_arr_rel_insert_input
}

"""aggregate max on columns"""
type location_max_fields {
  id: Int
  name: String
  status: basic_status
}

"""aggregate min on columns"""
type location_min_fields {
  id: Int
  name: String
  status: basic_status
}

"""
response of any mutation on the table "location"
"""
type location_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [location!]!
}

"""
input type for inserting object relation for remote table "location"
"""
input location_obj_rel_insert_input {
  data: location_insert_input!

  """upsert condition"""
  on_conflict: location_on_conflict
}

"""
on_conflict condition type for table "location"
"""
input location_on_conflict {
  constraint: location_constraint!
  update_columns: [location_update_column!]! = []
  where: location_bool_exp
}

"""Ordering options when selecting data from "location"."""
input location_order_by {
  id: order_by
  name: order_by
  status: order_by
  tables_aggregate: table_aggregate_order_by
}

"""primary key columns input for table: location"""
input location_pk_columns_input {
  id: Int!
}

"""
select columns of table "location"
"""
enum location_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""
input type for updating data in table "location"
"""
input location_set_input {
  id: Int
  name: String
  status: basic_status
}

"""aggregate stddev on columns"""
type location_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type location_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type location_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type location_sum_fields {
  id: Int
}

"""
update columns of table "location"
"""
enum location_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type location_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type location_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type location_variance_fields {
  id: Float
}

"""
columns and relationships of "majorgroup"
"""
type majorgroup {
  id: Int!

  """An array relationship"""
  items(
    """distinct select on columns"""
    distinct_on: [item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [item_order_by!]

    """filter the rows returned"""
    where: item_bool_exp
  ): [item!]!

  """An aggregate relationship"""
  items_aggregate(
    """distinct select on columns"""
    distinct_on: [item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [item_order_by!]

    """filter the rows returned"""
    where: item_bool_exp
  ): item_aggregate!
  name: String!

  """An array relationship"""
  specialrequests(
    """distinct select on columns"""
    distinct_on: [specialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [specialrequest_order_by!]

    """filter the rows returned"""
    where: specialrequest_bool_exp
  ): [specialrequest!]!

  """An aggregate relationship"""
  specialrequests_aggregate(
    """distinct select on columns"""
    distinct_on: [specialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [specialrequest_order_by!]

    """filter the rows returned"""
    where: specialrequest_bool_exp
  ): specialrequest_aggregate!
  status: basic_status!
}

"""
aggregated selection of "majorgroup"
"""
type majorgroup_aggregate {
  aggregate: majorgroup_aggregate_fields
  nodes: [majorgroup!]!
}

"""
aggregate fields of "majorgroup"
"""
type majorgroup_aggregate_fields {
  avg: majorgroup_avg_fields
  count(columns: [majorgroup_select_column!], distinct: Boolean): Int!
  max: majorgroup_max_fields
  min: majorgroup_min_fields
  stddev: majorgroup_stddev_fields
  stddev_pop: majorgroup_stddev_pop_fields
  stddev_samp: majorgroup_stddev_samp_fields
  sum: majorgroup_sum_fields
  var_pop: majorgroup_var_pop_fields
  var_samp: majorgroup_var_samp_fields
  variance: majorgroup_variance_fields
}

"""aggregate avg on columns"""
type majorgroup_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "majorgroup". All fields are combined with a logical 'AND'.
"""
input majorgroup_bool_exp {
  _and: [majorgroup_bool_exp!]
  _not: majorgroup_bool_exp
  _or: [majorgroup_bool_exp!]
  id: Int_comparison_exp
  items: item_bool_exp
  name: String_comparison_exp
  specialrequests: specialrequest_bool_exp
  status: basic_status_comparison_exp
}

"""
unique or primary key constraints on table "majorgroup"
"""
enum majorgroup_constraint {
  """unique or primary key constraint"""
  majorgroup_pkey
}

"""
input type for incrementing numeric columns in table "majorgroup"
"""
input majorgroup_inc_input {
  id: Int
}

"""
input type for inserting data into table "majorgroup"
"""
input majorgroup_insert_input {
  id: Int
  items: item_arr_rel_insert_input
  name: String
  specialrequests: specialrequest_arr_rel_insert_input
  status: basic_status
}

"""aggregate max on columns"""
type majorgroup_max_fields {
  id: Int
  name: String
  status: basic_status
}

"""aggregate min on columns"""
type majorgroup_min_fields {
  id: Int
  name: String
  status: basic_status
}

"""
response of any mutation on the table "majorgroup"
"""
type majorgroup_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [majorgroup!]!
}

"""
input type for inserting object relation for remote table "majorgroup"
"""
input majorgroup_obj_rel_insert_input {
  data: majorgroup_insert_input!

  """upsert condition"""
  on_conflict: majorgroup_on_conflict
}

"""
on_conflict condition type for table "majorgroup"
"""
input majorgroup_on_conflict {
  constraint: majorgroup_constraint!
  update_columns: [majorgroup_update_column!]! = []
  where: majorgroup_bool_exp
}

"""Ordering options when selecting data from "majorgroup"."""
input majorgroup_order_by {
  id: order_by
  items_aggregate: item_aggregate_order_by
  name: order_by
  specialrequests_aggregate: specialrequest_aggregate_order_by
  status: order_by
}

"""primary key columns input for table: majorgroup"""
input majorgroup_pk_columns_input {
  id: Int!
}

"""
select columns of table "majorgroup"
"""
enum majorgroup_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""
input type for updating data in table "majorgroup"
"""
input majorgroup_set_input {
  id: Int
  name: String
  status: basic_status
}

"""aggregate stddev on columns"""
type majorgroup_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type majorgroup_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type majorgroup_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type majorgroup_sum_fields {
  id: Int
}

"""
update columns of table "majorgroup"
"""
enum majorgroup_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type majorgroup_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type majorgroup_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type majorgroup_variance_fields {
  id: Float
}

"""
columns and relationships of "mealtype"
"""
type mealtype {
  id: Int!

  """An array relationship"""
  menus(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): [menu!]!

  """An aggregate relationship"""
  menus_aggregate(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): menu_aggregate!
  name: String!
  status: basic_status!
}

"""
aggregated selection of "mealtype"
"""
type mealtype_aggregate {
  aggregate: mealtype_aggregate_fields
  nodes: [mealtype!]!
}

"""
aggregate fields of "mealtype"
"""
type mealtype_aggregate_fields {
  avg: mealtype_avg_fields
  count(columns: [mealtype_select_column!], distinct: Boolean): Int!
  max: mealtype_max_fields
  min: mealtype_min_fields
  stddev: mealtype_stddev_fields
  stddev_pop: mealtype_stddev_pop_fields
  stddev_samp: mealtype_stddev_samp_fields
  sum: mealtype_sum_fields
  var_pop: mealtype_var_pop_fields
  var_samp: mealtype_var_samp_fields
  variance: mealtype_variance_fields
}

"""aggregate avg on columns"""
type mealtype_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "mealtype". All fields are combined with a logical 'AND'.
"""
input mealtype_bool_exp {
  _and: [mealtype_bool_exp!]
  _not: mealtype_bool_exp
  _or: [mealtype_bool_exp!]
  id: Int_comparison_exp
  menus: menu_bool_exp
  name: String_comparison_exp
  status: basic_status_comparison_exp
}

"""
unique or primary key constraints on table "mealtype"
"""
enum mealtype_constraint {
  """unique or primary key constraint"""
  mealtype_pkey
}

"""
input type for incrementing numeric columns in table "mealtype"
"""
input mealtype_inc_input {
  id: Int
}

"""
input type for inserting data into table "mealtype"
"""
input mealtype_insert_input {
  id: Int
  menus: menu_arr_rel_insert_input
  name: String
  status: basic_status
}

"""aggregate max on columns"""
type mealtype_max_fields {
  id: Int
  name: String
  status: basic_status
}

"""aggregate min on columns"""
type mealtype_min_fields {
  id: Int
  name: String
  status: basic_status
}

"""
response of any mutation on the table "mealtype"
"""
type mealtype_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [mealtype!]!
}

"""
input type for inserting object relation for remote table "mealtype"
"""
input mealtype_obj_rel_insert_input {
  data: mealtype_insert_input!

  """upsert condition"""
  on_conflict: mealtype_on_conflict
}

"""
on_conflict condition type for table "mealtype"
"""
input mealtype_on_conflict {
  constraint: mealtype_constraint!
  update_columns: [mealtype_update_column!]! = []
  where: mealtype_bool_exp
}

"""Ordering options when selecting data from "mealtype"."""
input mealtype_order_by {
  id: order_by
  menus_aggregate: menu_aggregate_order_by
  name: order_by
  status: order_by
}

"""primary key columns input for table: mealtype"""
input mealtype_pk_columns_input {
  id: Int!
}

"""
select columns of table "mealtype"
"""
enum mealtype_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""
input type for updating data in table "mealtype"
"""
input mealtype_set_input {
  id: Int
  name: String
  status: basic_status
}

"""aggregate stddev on columns"""
type mealtype_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type mealtype_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type mealtype_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type mealtype_sum_fields {
  id: Int
}

"""
update columns of table "mealtype"
"""
enum mealtype_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type mealtype_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type mealtype_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type mealtype_variance_fields {
  id: Float
}

"""
columns and relationships of "menu"
"""
type menu {
  id: Int!
  isdefault: Boolean!

  """An object relationship"""
  mealtype: mealtype!
  mealtypeid: Int!

  """An array relationship"""
  menuitems(
    """distinct select on columns"""
    distinct_on: [menuitem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menuitem_order_by!]

    """filter the rows returned"""
    where: menuitem_bool_exp
  ): [menuitem!]!

  """An aggregate relationship"""
  menuitems_aggregate(
    """distinct select on columns"""
    distinct_on: [menuitem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menuitem_order_by!]

    """filter the rows returned"""
    where: menuitem_bool_exp
  ): menuitem_aggregate!
  name: String!
  status: basic_status!
}

"""
aggregated selection of "menu"
"""
type menu_aggregate {
  aggregate: menu_aggregate_fields
  nodes: [menu!]!
}

"""
aggregate fields of "menu"
"""
type menu_aggregate_fields {
  avg: menu_avg_fields
  count(columns: [menu_select_column!], distinct: Boolean): Int!
  max: menu_max_fields
  min: menu_min_fields
  stddev: menu_stddev_fields
  stddev_pop: menu_stddev_pop_fields
  stddev_samp: menu_stddev_samp_fields
  sum: menu_sum_fields
  var_pop: menu_var_pop_fields
  var_samp: menu_var_samp_fields
  variance: menu_variance_fields
}

"""
order by aggregate values of table "menu"
"""
input menu_aggregate_order_by {
  avg: menu_avg_order_by
  count: order_by
  max: menu_max_order_by
  min: menu_min_order_by
  stddev: menu_stddev_order_by
  stddev_pop: menu_stddev_pop_order_by
  stddev_samp: menu_stddev_samp_order_by
  sum: menu_sum_order_by
  var_pop: menu_var_pop_order_by
  var_samp: menu_var_samp_order_by
  variance: menu_variance_order_by
}

"""
input type for inserting array relation for remote table "menu"
"""
input menu_arr_rel_insert_input {
  data: [menu_insert_input!]!

  """upsert condition"""
  on_conflict: menu_on_conflict
}

"""aggregate avg on columns"""
type menu_avg_fields {
  id: Float
  mealtypeid: Float
}

"""
order by avg() on columns of table "menu"
"""
input menu_avg_order_by {
  id: order_by
  mealtypeid: order_by
}

"""
Boolean expression to filter rows from the table "menu". All fields are combined with a logical 'AND'.
"""
input menu_bool_exp {
  _and: [menu_bool_exp!]
  _not: menu_bool_exp
  _or: [menu_bool_exp!]
  id: Int_comparison_exp
  isdefault: Boolean_comparison_exp
  mealtype: mealtype_bool_exp
  mealtypeid: Int_comparison_exp
  menuitems: menuitem_bool_exp
  name: String_comparison_exp
  status: basic_status_comparison_exp
}

"""
unique or primary key constraints on table "menu"
"""
enum menu_constraint {
  """unique or primary key constraint"""
  menu_pkey
}

"""
input type for incrementing numeric columns in table "menu"
"""
input menu_inc_input {
  id: Int
  mealtypeid: Int
}

"""
input type for inserting data into table "menu"
"""
input menu_insert_input {
  id: Int
  isdefault: Boolean
  mealtype: mealtype_obj_rel_insert_input
  mealtypeid: Int
  menuitems: menuitem_arr_rel_insert_input
  name: String
  status: basic_status
}

"""aggregate max on columns"""
type menu_max_fields {
  id: Int
  mealtypeid: Int
  name: String
  status: basic_status
}

"""
order by max() on columns of table "menu"
"""
input menu_max_order_by {
  id: order_by
  mealtypeid: order_by
  name: order_by
  status: order_by
}

"""aggregate min on columns"""
type menu_min_fields {
  id: Int
  mealtypeid: Int
  name: String
  status: basic_status
}

"""
order by min() on columns of table "menu"
"""
input menu_min_order_by {
  id: order_by
  mealtypeid: order_by
  name: order_by
  status: order_by
}

"""
response of any mutation on the table "menu"
"""
type menu_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [menu!]!
}

"""
input type for inserting object relation for remote table "menu"
"""
input menu_obj_rel_insert_input {
  data: menu_insert_input!

  """upsert condition"""
  on_conflict: menu_on_conflict
}

"""
on_conflict condition type for table "menu"
"""
input menu_on_conflict {
  constraint: menu_constraint!
  update_columns: [menu_update_column!]! = []
  where: menu_bool_exp
}

"""Ordering options when selecting data from "menu"."""
input menu_order_by {
  id: order_by
  isdefault: order_by
  mealtype: mealtype_order_by
  mealtypeid: order_by
  menuitems_aggregate: menuitem_aggregate_order_by
  name: order_by
  status: order_by
}

"""primary key columns input for table: menu"""
input menu_pk_columns_input {
  id: Int!
}

"""
select columns of table "menu"
"""
enum menu_select_column {
  """column name"""
  id

  """column name"""
  isdefault

  """column name"""
  mealtypeid

  """column name"""
  name

  """column name"""
  status
}

"""
input type for updating data in table "menu"
"""
input menu_set_input {
  id: Int
  isdefault: Boolean
  mealtypeid: Int
  name: String
  status: basic_status
}

"""aggregate stddev on columns"""
type menu_stddev_fields {
  id: Float
  mealtypeid: Float
}

"""
order by stddev() on columns of table "menu"
"""
input menu_stddev_order_by {
  id: order_by
  mealtypeid: order_by
}

"""aggregate stddev_pop on columns"""
type menu_stddev_pop_fields {
  id: Float
  mealtypeid: Float
}

"""
order by stddev_pop() on columns of table "menu"
"""
input menu_stddev_pop_order_by {
  id: order_by
  mealtypeid: order_by
}

"""aggregate stddev_samp on columns"""
type menu_stddev_samp_fields {
  id: Float
  mealtypeid: Float
}

"""
order by stddev_samp() on columns of table "menu"
"""
input menu_stddev_samp_order_by {
  id: order_by
  mealtypeid: order_by
}

"""aggregate sum on columns"""
type menu_sum_fields {
  id: Int
  mealtypeid: Int
}

"""
order by sum() on columns of table "menu"
"""
input menu_sum_order_by {
  id: order_by
  mealtypeid: order_by
}

"""
update columns of table "menu"
"""
enum menu_update_column {
  """column name"""
  id

  """column name"""
  isdefault

  """column name"""
  mealtypeid

  """column name"""
  name

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type menu_var_pop_fields {
  id: Float
  mealtypeid: Float
}

"""
order by var_pop() on columns of table "menu"
"""
input menu_var_pop_order_by {
  id: order_by
  mealtypeid: order_by
}

"""aggregate var_samp on columns"""
type menu_var_samp_fields {
  id: Float
  mealtypeid: Float
}

"""
order by var_samp() on columns of table "menu"
"""
input menu_var_samp_order_by {
  id: order_by
  mealtypeid: order_by
}

"""aggregate variance on columns"""
type menu_variance_fields {
  id: Float
  mealtypeid: Float
}

"""
order by variance() on columns of table "menu"
"""
input menu_variance_order_by {
  id: order_by
  mealtypeid: order_by
}

"""
columns and relationships of "menuitem"
"""
type menuitem {
  id: Int!

  """An object relationship"""
  item: item!
  itemid: Int!

  """An object relationship"""
  menu: menu!
  menuid: Int!
  price: numeric!
}

"""
aggregated selection of "menuitem"
"""
type menuitem_aggregate {
  aggregate: menuitem_aggregate_fields
  nodes: [menuitem!]!
}

"""
aggregate fields of "menuitem"
"""
type menuitem_aggregate_fields {
  avg: menuitem_avg_fields
  count(columns: [menuitem_select_column!], distinct: Boolean): Int!
  max: menuitem_max_fields
  min: menuitem_min_fields
  stddev: menuitem_stddev_fields
  stddev_pop: menuitem_stddev_pop_fields
  stddev_samp: menuitem_stddev_samp_fields
  sum: menuitem_sum_fields
  var_pop: menuitem_var_pop_fields
  var_samp: menuitem_var_samp_fields
  variance: menuitem_variance_fields
}

"""
order by aggregate values of table "menuitem"
"""
input menuitem_aggregate_order_by {
  avg: menuitem_avg_order_by
  count: order_by
  max: menuitem_max_order_by
  min: menuitem_min_order_by
  stddev: menuitem_stddev_order_by
  stddev_pop: menuitem_stddev_pop_order_by
  stddev_samp: menuitem_stddev_samp_order_by
  sum: menuitem_sum_order_by
  var_pop: menuitem_var_pop_order_by
  var_samp: menuitem_var_samp_order_by
  variance: menuitem_variance_order_by
}

"""
input type for inserting array relation for remote table "menuitem"
"""
input menuitem_arr_rel_insert_input {
  data: [menuitem_insert_input!]!

  """upsert condition"""
  on_conflict: menuitem_on_conflict
}

"""aggregate avg on columns"""
type menuitem_avg_fields {
  id: Float
  itemid: Float
  menuid: Float
  price: Float
}

"""
order by avg() on columns of table "menuitem"
"""
input menuitem_avg_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""
Boolean expression to filter rows from the table "menuitem". All fields are combined with a logical 'AND'.
"""
input menuitem_bool_exp {
  _and: [menuitem_bool_exp!]
  _not: menuitem_bool_exp
  _or: [menuitem_bool_exp!]
  id: Int_comparison_exp
  item: item_bool_exp
  itemid: Int_comparison_exp
  menu: menu_bool_exp
  menuid: Int_comparison_exp
  price: numeric_comparison_exp
}

"""
unique or primary key constraints on table "menuitem"
"""
enum menuitem_constraint {
  """unique or primary key constraint"""
  menuitem_pkey
}

"""
input type for incrementing numeric columns in table "menuitem"
"""
input menuitem_inc_input {
  id: Int
  itemid: Int
  menuid: Int
  price: numeric
}

"""
input type for inserting data into table "menuitem"
"""
input menuitem_insert_input {
  id: Int
  item: item_obj_rel_insert_input
  itemid: Int
  menu: menu_obj_rel_insert_input
  menuid: Int
  price: numeric
}

"""aggregate max on columns"""
type menuitem_max_fields {
  id: Int
  itemid: Int
  menuid: Int
  price: numeric
}

"""
order by max() on columns of table "menuitem"
"""
input menuitem_max_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""aggregate min on columns"""
type menuitem_min_fields {
  id: Int
  itemid: Int
  menuid: Int
  price: numeric
}

"""
order by min() on columns of table "menuitem"
"""
input menuitem_min_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""
response of any mutation on the table "menuitem"
"""
type menuitem_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [menuitem!]!
}

"""
on_conflict condition type for table "menuitem"
"""
input menuitem_on_conflict {
  constraint: menuitem_constraint!
  update_columns: [menuitem_update_column!]! = []
  where: menuitem_bool_exp
}

"""Ordering options when selecting data from "menuitem"."""
input menuitem_order_by {
  id: order_by
  item: item_order_by
  itemid: order_by
  menu: menu_order_by
  menuid: order_by
  price: order_by
}

"""primary key columns input for table: menuitem"""
input menuitem_pk_columns_input {
  id: Int!
}

"""
select columns of table "menuitem"
"""
enum menuitem_select_column {
  """column name"""
  id

  """column name"""
  itemid

  """column name"""
  menuid

  """column name"""
  price
}

"""
input type for updating data in table "menuitem"
"""
input menuitem_set_input {
  id: Int
  itemid: Int
  menuid: Int
  price: numeric
}

"""aggregate stddev on columns"""
type menuitem_stddev_fields {
  id: Float
  itemid: Float
  menuid: Float
  price: Float
}

"""
order by stddev() on columns of table "menuitem"
"""
input menuitem_stddev_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""aggregate stddev_pop on columns"""
type menuitem_stddev_pop_fields {
  id: Float
  itemid: Float
  menuid: Float
  price: Float
}

"""
order by stddev_pop() on columns of table "menuitem"
"""
input menuitem_stddev_pop_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""aggregate stddev_samp on columns"""
type menuitem_stddev_samp_fields {
  id: Float
  itemid: Float
  menuid: Float
  price: Float
}

"""
order by stddev_samp() on columns of table "menuitem"
"""
input menuitem_stddev_samp_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""aggregate sum on columns"""
type menuitem_sum_fields {
  id: Int
  itemid: Int
  menuid: Int
  price: numeric
}

"""
order by sum() on columns of table "menuitem"
"""
input menuitem_sum_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""
update columns of table "menuitem"
"""
enum menuitem_update_column {
  """column name"""
  id

  """column name"""
  itemid

  """column name"""
  menuid

  """column name"""
  price
}

"""aggregate var_pop on columns"""
type menuitem_var_pop_fields {
  id: Float
  itemid: Float
  menuid: Float
  price: Float
}

"""
order by var_pop() on columns of table "menuitem"
"""
input menuitem_var_pop_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""aggregate var_samp on columns"""
type menuitem_var_samp_fields {
  id: Float
  itemid: Float
  menuid: Float
  price: Float
}

"""
order by var_samp() on columns of table "menuitem"
"""
input menuitem_var_samp_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""aggregate variance on columns"""
type menuitem_variance_fields {
  id: Float
  itemid: Float
  menuid: Float
  price: Float
}

"""
order by variance() on columns of table "menuitem"
"""
input menuitem_variance_order_by {
  id: order_by
  itemid: order_by
  menuid: order_by
  price: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "account"
  """
  delete_account(
    """filter the rows which have to be deleted"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  delete single row from the table: "account"
  """
  delete_account_by_pk(id: Int!): account

  """
  delete data from the table: "bill"
  """
  delete_bill(
    """filter the rows which have to be deleted"""
    where: bill_bool_exp!
  ): bill_mutation_response

  """
  delete single row from the table: "bill"
  """
  delete_bill_by_pk(id: Int!): bill

  """
  delete data from the table: "billdetail"
  """
  delete_billdetail(
    """filter the rows which have to be deleted"""
    where: billdetail_bool_exp!
  ): billdetail_mutation_response

  """
  delete single row from the table: "billdetail"
  """
  delete_billdetail_by_pk(id: Int!): billdetail

  """
  delete data from the table: "billpayment"
  """
  delete_billpayment(
    """filter the rows which have to be deleted"""
    where: billpayment_bool_exp!
  ): billpayment_mutation_response

  """
  delete single row from the table: "billpayment"
  """
  delete_billpayment_by_pk(id: Int!): billpayment

  """
  delete data from the table: "cashierlog"
  """
  delete_cashierlog(
    """filter the rows which have to be deleted"""
    where: cashierlog_bool_exp!
  ): cashierlog_mutation_response

  """
  delete single row from the table: "cashierlog"
  """
  delete_cashierlog_by_pk(id: Int!): cashierlog

  """
  delete data from the table: "check"
  """
  delete_check(
    """filter the rows which have to be deleted"""
    where: check_bool_exp!
  ): check_mutation_response

  """
  delete single row from the table: "check"
  """
  delete_check_by_pk(id: Int!): check

  """
  delete data from the table: "checkdetail"
  """
  delete_checkdetail(
    """filter the rows which have to be deleted"""
    where: checkdetail_bool_exp!
  ): checkdetail_mutation_response

  """
  delete single row from the table: "checkdetail"
  """
  delete_checkdetail_by_pk(id: Int!): checkdetail

  """
  delete data from the table: "checkdetailspecialrequest"
  """
  delete_checkdetailspecialrequest(
    """filter the rows which have to be deleted"""
    where: checkdetailspecialrequest_bool_exp!
  ): checkdetailspecialrequest_mutation_response

  """
  delete single row from the table: "checkdetailspecialrequest"
  """
  delete_checkdetailspecialrequest_by_pk(id: Int!): checkdetailspecialrequest

  """
  delete data from the table: "item"
  """
  delete_item(
    """filter the rows which have to be deleted"""
    where: item_bool_exp!
  ): item_mutation_response

  """
  delete single row from the table: "item"
  """
  delete_item_by_pk(id: Int!): item

  """
  delete data from the table: "itemoutofstock"
  """
  delete_itemoutofstock(
    """filter the rows which have to be deleted"""
    where: itemoutofstock_bool_exp!
  ): itemoutofstock_mutation_response

  """
  delete single row from the table: "itemoutofstock"
  """
  delete_itemoutofstock_by_pk(id: Int!): itemoutofstock

  """
  delete data from the table: "location"
  """
  delete_location(
    """filter the rows which have to be deleted"""
    where: location_bool_exp!
  ): location_mutation_response

  """
  delete single row from the table: "location"
  """
  delete_location_by_pk(id: Int!): location

  """
  delete data from the table: "majorgroup"
  """
  delete_majorgroup(
    """filter the rows which have to be deleted"""
    where: majorgroup_bool_exp!
  ): majorgroup_mutation_response

  """
  delete single row from the table: "majorgroup"
  """
  delete_majorgroup_by_pk(id: Int!): majorgroup

  """
  delete data from the table: "mealtype"
  """
  delete_mealtype(
    """filter the rows which have to be deleted"""
    where: mealtype_bool_exp!
  ): mealtype_mutation_response

  """
  delete single row from the table: "mealtype"
  """
  delete_mealtype_by_pk(id: Int!): mealtype

  """
  delete data from the table: "menu"
  """
  delete_menu(
    """filter the rows which have to be deleted"""
    where: menu_bool_exp!
  ): menu_mutation_response

  """
  delete single row from the table: "menu"
  """
  delete_menu_by_pk(id: Int!): menu

  """
  delete data from the table: "menuitem"
  """
  delete_menuitem(
    """filter the rows which have to be deleted"""
    where: menuitem_bool_exp!
  ): menuitem_mutation_response

  """
  delete single row from the table: "menuitem"
  """
  delete_menuitem_by_pk(id: Int!): menuitem

  """
  delete data from the table: "paymentmethod"
  """
  delete_paymentmethod(
    """filter the rows which have to be deleted"""
    where: paymentmethod_bool_exp!
  ): paymentmethod_mutation_response

  """
  delete single row from the table: "paymentmethod"
  """
  delete_paymentmethod_by_pk(id: Int!): paymentmethod

  """
  delete data from the table: "role"
  """
  delete_role(
    """filter the rows which have to be deleted"""
    where: role_bool_exp!
  ): role_mutation_response

  """
  delete single row from the table: "role"
  """
  delete_role_by_pk(id: Int!): role

  """
  delete data from the table: "sessions"
  """
  delete_sessions(
    """filter the rows which have to be deleted"""
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  delete single row from the table: "sessions"
  """
  delete_sessions_by_pk(sid: String!): sessions

  """
  delete data from the table: "shift"
  """
  delete_shift(
    """filter the rows which have to be deleted"""
    where: shift_bool_exp!
  ): shift_mutation_response

  """
  delete single row from the table: "shift"
  """
  delete_shift_by_pk(id: Int!): shift

  """
  delete data from the table: "specialrequest"
  """
  delete_specialrequest(
    """filter the rows which have to be deleted"""
    where: specialrequest_bool_exp!
  ): specialrequest_mutation_response

  """
  delete single row from the table: "specialrequest"
  """
  delete_specialrequest_by_pk(id: Int!): specialrequest

  """
  delete data from the table: "systemsetting"
  """
  delete_systemsetting(
    """filter the rows which have to be deleted"""
    where: systemsetting_bool_exp!
  ): systemsetting_mutation_response

  """
  delete single row from the table: "systemsetting"
  """
  delete_systemsetting_by_pk(id: Int!): systemsetting

  """
  delete data from the table: "table"
  """
  delete_table(
    """filter the rows which have to be deleted"""
    where: table_bool_exp!
  ): table_mutation_response

  """
  delete single row from the table: "table"
  """
  delete_table_by_pk(id: Int!): table

  """
  delete data from the table: "voidreason"
  """
  delete_voidreason(
    """filter the rows which have to be deleted"""
    where: voidreason_bool_exp!
  ): voidreason_mutation_response

  """
  delete single row from the table: "voidreason"
  """
  delete_voidreason_by_pk(id: Int!): voidreason

  """
  delete data from the table: "worksession"
  """
  delete_worksession(
    """filter the rows which have to be deleted"""
    where: worksession_bool_exp!
  ): worksession_mutation_response

  """
  delete single row from the table: "worksession"
  """
  delete_worksession_by_pk(id: Int!): worksession

  """
  insert data into the table: "account"
  """
  insert_account(
    """the rows to be inserted"""
    objects: [account_insert_input!]!

    """upsert condition"""
    on_conflict: account_on_conflict
  ): account_mutation_response

  """
  insert a single row into the table: "account"
  """
  insert_account_one(
    """the row to be inserted"""
    object: account_insert_input!

    """upsert condition"""
    on_conflict: account_on_conflict
  ): account

  """
  insert data into the table: "bill"
  """
  insert_bill(
    """the rows to be inserted"""
    objects: [bill_insert_input!]!

    """upsert condition"""
    on_conflict: bill_on_conflict
  ): bill_mutation_response

  """
  insert a single row into the table: "bill"
  """
  insert_bill_one(
    """the row to be inserted"""
    object: bill_insert_input!

    """upsert condition"""
    on_conflict: bill_on_conflict
  ): bill

  """
  insert data into the table: "billdetail"
  """
  insert_billdetail(
    """the rows to be inserted"""
    objects: [billdetail_insert_input!]!

    """upsert condition"""
    on_conflict: billdetail_on_conflict
  ): billdetail_mutation_response

  """
  insert a single row into the table: "billdetail"
  """
  insert_billdetail_one(
    """the row to be inserted"""
    object: billdetail_insert_input!

    """upsert condition"""
    on_conflict: billdetail_on_conflict
  ): billdetail

  """
  insert data into the table: "billpayment"
  """
  insert_billpayment(
    """the rows to be inserted"""
    objects: [billpayment_insert_input!]!

    """upsert condition"""
    on_conflict: billpayment_on_conflict
  ): billpayment_mutation_response

  """
  insert a single row into the table: "billpayment"
  """
  insert_billpayment_one(
    """the row to be inserted"""
    object: billpayment_insert_input!

    """upsert condition"""
    on_conflict: billpayment_on_conflict
  ): billpayment

  """
  insert data into the table: "cashierlog"
  """
  insert_cashierlog(
    """the rows to be inserted"""
    objects: [cashierlog_insert_input!]!

    """upsert condition"""
    on_conflict: cashierlog_on_conflict
  ): cashierlog_mutation_response

  """
  insert a single row into the table: "cashierlog"
  """
  insert_cashierlog_one(
    """the row to be inserted"""
    object: cashierlog_insert_input!

    """upsert condition"""
    on_conflict: cashierlog_on_conflict
  ): cashierlog

  """
  insert data into the table: "check"
  """
  insert_check(
    """the rows to be inserted"""
    objects: [check_insert_input!]!

    """upsert condition"""
    on_conflict: check_on_conflict
  ): check_mutation_response

  """
  insert a single row into the table: "check"
  """
  insert_check_one(
    """the row to be inserted"""
    object: check_insert_input!

    """upsert condition"""
    on_conflict: check_on_conflict
  ): check

  """
  insert data into the table: "checkdetail"
  """
  insert_checkdetail(
    """the rows to be inserted"""
    objects: [checkdetail_insert_input!]!

    """upsert condition"""
    on_conflict: checkdetail_on_conflict
  ): checkdetail_mutation_response

  """
  insert a single row into the table: "checkdetail"
  """
  insert_checkdetail_one(
    """the row to be inserted"""
    object: checkdetail_insert_input!

    """upsert condition"""
    on_conflict: checkdetail_on_conflict
  ): checkdetail

  """
  insert data into the table: "checkdetailspecialrequest"
  """
  insert_checkdetailspecialrequest(
    """the rows to be inserted"""
    objects: [checkdetailspecialrequest_insert_input!]!

    """upsert condition"""
    on_conflict: checkdetailspecialrequest_on_conflict
  ): checkdetailspecialrequest_mutation_response

  """
  insert a single row into the table: "checkdetailspecialrequest"
  """
  insert_checkdetailspecialrequest_one(
    """the row to be inserted"""
    object: checkdetailspecialrequest_insert_input!

    """upsert condition"""
    on_conflict: checkdetailspecialrequest_on_conflict
  ): checkdetailspecialrequest

  """
  insert data into the table: "item"
  """
  insert_item(
    """the rows to be inserted"""
    objects: [item_insert_input!]!

    """upsert condition"""
    on_conflict: item_on_conflict
  ): item_mutation_response

  """
  insert a single row into the table: "item"
  """
  insert_item_one(
    """the row to be inserted"""
    object: item_insert_input!

    """upsert condition"""
    on_conflict: item_on_conflict
  ): item

  """
  insert data into the table: "itemoutofstock"
  """
  insert_itemoutofstock(
    """the rows to be inserted"""
    objects: [itemoutofstock_insert_input!]!

    """upsert condition"""
    on_conflict: itemoutofstock_on_conflict
  ): itemoutofstock_mutation_response

  """
  insert a single row into the table: "itemoutofstock"
  """
  insert_itemoutofstock_one(
    """the row to be inserted"""
    object: itemoutofstock_insert_input!

    """upsert condition"""
    on_conflict: itemoutofstock_on_conflict
  ): itemoutofstock

  """
  insert data into the table: "location"
  """
  insert_location(
    """the rows to be inserted"""
    objects: [location_insert_input!]!

    """upsert condition"""
    on_conflict: location_on_conflict
  ): location_mutation_response

  """
  insert a single row into the table: "location"
  """
  insert_location_one(
    """the row to be inserted"""
    object: location_insert_input!

    """upsert condition"""
    on_conflict: location_on_conflict
  ): location

  """
  insert data into the table: "majorgroup"
  """
  insert_majorgroup(
    """the rows to be inserted"""
    objects: [majorgroup_insert_input!]!

    """upsert condition"""
    on_conflict: majorgroup_on_conflict
  ): majorgroup_mutation_response

  """
  insert a single row into the table: "majorgroup"
  """
  insert_majorgroup_one(
    """the row to be inserted"""
    object: majorgroup_insert_input!

    """upsert condition"""
    on_conflict: majorgroup_on_conflict
  ): majorgroup

  """
  insert data into the table: "mealtype"
  """
  insert_mealtype(
    """the rows to be inserted"""
    objects: [mealtype_insert_input!]!

    """upsert condition"""
    on_conflict: mealtype_on_conflict
  ): mealtype_mutation_response

  """
  insert a single row into the table: "mealtype"
  """
  insert_mealtype_one(
    """the row to be inserted"""
    object: mealtype_insert_input!

    """upsert condition"""
    on_conflict: mealtype_on_conflict
  ): mealtype

  """
  insert data into the table: "menu"
  """
  insert_menu(
    """the rows to be inserted"""
    objects: [menu_insert_input!]!

    """upsert condition"""
    on_conflict: menu_on_conflict
  ): menu_mutation_response

  """
  insert a single row into the table: "menu"
  """
  insert_menu_one(
    """the row to be inserted"""
    object: menu_insert_input!

    """upsert condition"""
    on_conflict: menu_on_conflict
  ): menu

  """
  insert data into the table: "menuitem"
  """
  insert_menuitem(
    """the rows to be inserted"""
    objects: [menuitem_insert_input!]!

    """upsert condition"""
    on_conflict: menuitem_on_conflict
  ): menuitem_mutation_response

  """
  insert a single row into the table: "menuitem"
  """
  insert_menuitem_one(
    """the row to be inserted"""
    object: menuitem_insert_input!

    """upsert condition"""
    on_conflict: menuitem_on_conflict
  ): menuitem

  """
  insert data into the table: "paymentmethod"
  """
  insert_paymentmethod(
    """the rows to be inserted"""
    objects: [paymentmethod_insert_input!]!

    """upsert condition"""
    on_conflict: paymentmethod_on_conflict
  ): paymentmethod_mutation_response

  """
  insert a single row into the table: "paymentmethod"
  """
  insert_paymentmethod_one(
    """the row to be inserted"""
    object: paymentmethod_insert_input!

    """upsert condition"""
    on_conflict: paymentmethod_on_conflict
  ): paymentmethod

  """
  insert data into the table: "role"
  """
  insert_role(
    """the rows to be inserted"""
    objects: [role_insert_input!]!

    """upsert condition"""
    on_conflict: role_on_conflict
  ): role_mutation_response

  """
  insert a single row into the table: "role"
  """
  insert_role_one(
    """the row to be inserted"""
    object: role_insert_input!

    """upsert condition"""
    on_conflict: role_on_conflict
  ): role

  """
  insert data into the table: "sessions"
  """
  insert_sessions(
    """the rows to be inserted"""
    objects: [sessions_insert_input!]!

    """upsert condition"""
    on_conflict: sessions_on_conflict
  ): sessions_mutation_response

  """
  insert a single row into the table: "sessions"
  """
  insert_sessions_one(
    """the row to be inserted"""
    object: sessions_insert_input!

    """upsert condition"""
    on_conflict: sessions_on_conflict
  ): sessions

  """
  insert data into the table: "shift"
  """
  insert_shift(
    """the rows to be inserted"""
    objects: [shift_insert_input!]!

    """upsert condition"""
    on_conflict: shift_on_conflict
  ): shift_mutation_response

  """
  insert a single row into the table: "shift"
  """
  insert_shift_one(
    """the row to be inserted"""
    object: shift_insert_input!

    """upsert condition"""
    on_conflict: shift_on_conflict
  ): shift

  """
  insert data into the table: "specialrequest"
  """
  insert_specialrequest(
    """the rows to be inserted"""
    objects: [specialrequest_insert_input!]!

    """upsert condition"""
    on_conflict: specialrequest_on_conflict
  ): specialrequest_mutation_response

  """
  insert a single row into the table: "specialrequest"
  """
  insert_specialrequest_one(
    """the row to be inserted"""
    object: specialrequest_insert_input!

    """upsert condition"""
    on_conflict: specialrequest_on_conflict
  ): specialrequest

  """
  insert data into the table: "systemsetting"
  """
  insert_systemsetting(
    """the rows to be inserted"""
    objects: [systemsetting_insert_input!]!

    """upsert condition"""
    on_conflict: systemsetting_on_conflict
  ): systemsetting_mutation_response

  """
  insert a single row into the table: "systemsetting"
  """
  insert_systemsetting_one(
    """the row to be inserted"""
    object: systemsetting_insert_input!

    """upsert condition"""
    on_conflict: systemsetting_on_conflict
  ): systemsetting

  """
  insert data into the table: "table"
  """
  insert_table(
    """the rows to be inserted"""
    objects: [table_insert_input!]!

    """upsert condition"""
    on_conflict: table_on_conflict
  ): table_mutation_response

  """
  insert a single row into the table: "table"
  """
  insert_table_one(
    """the row to be inserted"""
    object: table_insert_input!

    """upsert condition"""
    on_conflict: table_on_conflict
  ): table

  """
  insert data into the table: "voidreason"
  """
  insert_voidreason(
    """the rows to be inserted"""
    objects: [voidreason_insert_input!]!

    """upsert condition"""
    on_conflict: voidreason_on_conflict
  ): voidreason_mutation_response

  """
  insert a single row into the table: "voidreason"
  """
  insert_voidreason_one(
    """the row to be inserted"""
    object: voidreason_insert_input!

    """upsert condition"""
    on_conflict: voidreason_on_conflict
  ): voidreason

  """
  insert data into the table: "worksession"
  """
  insert_worksession(
    """the rows to be inserted"""
    objects: [worksession_insert_input!]!

    """upsert condition"""
    on_conflict: worksession_on_conflict
  ): worksession_mutation_response

  """
  insert a single row into the table: "worksession"
  """
  insert_worksession_one(
    """the row to be inserted"""
    object: worksession_insert_input!

    """upsert condition"""
    on_conflict: worksession_on_conflict
  ): worksession

  """
  update data of the table: "account"
  """
  update_account(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input

    """filter the rows which have to be updated"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  update single row of the table: "account"
  """
  update_account_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input
    pk_columns: account_pk_columns_input!
  ): account

  """
  update data of the table: "bill"
  """
  update_bill(
    """increments the numeric columns with given value of the filtered values"""
    _inc: bill_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: bill_set_input

    """filter the rows which have to be updated"""
    where: bill_bool_exp!
  ): bill_mutation_response

  """
  update single row of the table: "bill"
  """
  update_bill_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: bill_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: bill_set_input
    pk_columns: bill_pk_columns_input!
  ): bill

  """
  update data of the table: "billdetail"
  """
  update_billdetail(
    """increments the numeric columns with given value of the filtered values"""
    _inc: billdetail_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: billdetail_set_input

    """filter the rows which have to be updated"""
    where: billdetail_bool_exp!
  ): billdetail_mutation_response

  """
  update single row of the table: "billdetail"
  """
  update_billdetail_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: billdetail_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: billdetail_set_input
    pk_columns: billdetail_pk_columns_input!
  ): billdetail

  """
  update data of the table: "billpayment"
  """
  update_billpayment(
    """increments the numeric columns with given value of the filtered values"""
    _inc: billpayment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: billpayment_set_input

    """filter the rows which have to be updated"""
    where: billpayment_bool_exp!
  ): billpayment_mutation_response

  """
  update single row of the table: "billpayment"
  """
  update_billpayment_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: billpayment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: billpayment_set_input
    pk_columns: billpayment_pk_columns_input!
  ): billpayment

  """
  update data of the table: "cashierlog"
  """
  update_cashierlog(
    """increments the numeric columns with given value of the filtered values"""
    _inc: cashierlog_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cashierlog_set_input

    """filter the rows which have to be updated"""
    where: cashierlog_bool_exp!
  ): cashierlog_mutation_response

  """
  update single row of the table: "cashierlog"
  """
  update_cashierlog_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: cashierlog_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cashierlog_set_input
    pk_columns: cashierlog_pk_columns_input!
  ): cashierlog

  """
  update data of the table: "check"
  """
  update_check(
    """increments the numeric columns with given value of the filtered values"""
    _inc: check_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: check_set_input

    """filter the rows which have to be updated"""
    where: check_bool_exp!
  ): check_mutation_response

  """
  update single row of the table: "check"
  """
  update_check_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: check_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: check_set_input
    pk_columns: check_pk_columns_input!
  ): check

  """
  update data of the table: "checkdetail"
  """
  update_checkdetail(
    """increments the numeric columns with given value of the filtered values"""
    _inc: checkdetail_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: checkdetail_set_input

    """filter the rows which have to be updated"""
    where: checkdetail_bool_exp!
  ): checkdetail_mutation_response

  """
  update single row of the table: "checkdetail"
  """
  update_checkdetail_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: checkdetail_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: checkdetail_set_input
    pk_columns: checkdetail_pk_columns_input!
  ): checkdetail

  """
  update data of the table: "checkdetailspecialrequest"
  """
  update_checkdetailspecialrequest(
    """increments the numeric columns with given value of the filtered values"""
    _inc: checkdetailspecialrequest_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: checkdetailspecialrequest_set_input

    """filter the rows which have to be updated"""
    where: checkdetailspecialrequest_bool_exp!
  ): checkdetailspecialrequest_mutation_response

  """
  update single row of the table: "checkdetailspecialrequest"
  """
  update_checkdetailspecialrequest_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: checkdetailspecialrequest_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: checkdetailspecialrequest_set_input
    pk_columns: checkdetailspecialrequest_pk_columns_input!
  ): checkdetailspecialrequest

  """
  update data of the table: "item"
  """
  update_item(
    """increments the numeric columns with given value of the filtered values"""
    _inc: item_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: item_set_input

    """filter the rows which have to be updated"""
    where: item_bool_exp!
  ): item_mutation_response

  """
  update single row of the table: "item"
  """
  update_item_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: item_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: item_set_input
    pk_columns: item_pk_columns_input!
  ): item

  """
  update data of the table: "itemoutofstock"
  """
  update_itemoutofstock(
    """increments the numeric columns with given value of the filtered values"""
    _inc: itemoutofstock_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: itemoutofstock_set_input

    """filter the rows which have to be updated"""
    where: itemoutofstock_bool_exp!
  ): itemoutofstock_mutation_response

  """
  update single row of the table: "itemoutofstock"
  """
  update_itemoutofstock_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: itemoutofstock_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: itemoutofstock_set_input
    pk_columns: itemoutofstock_pk_columns_input!
  ): itemoutofstock

  """
  update data of the table: "location"
  """
  update_location(
    """increments the numeric columns with given value of the filtered values"""
    _inc: location_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: location_set_input

    """filter the rows which have to be updated"""
    where: location_bool_exp!
  ): location_mutation_response

  """
  update single row of the table: "location"
  """
  update_location_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: location_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: location_set_input
    pk_columns: location_pk_columns_input!
  ): location

  """
  update data of the table: "majorgroup"
  """
  update_majorgroup(
    """increments the numeric columns with given value of the filtered values"""
    _inc: majorgroup_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: majorgroup_set_input

    """filter the rows which have to be updated"""
    where: majorgroup_bool_exp!
  ): majorgroup_mutation_response

  """
  update single row of the table: "majorgroup"
  """
  update_majorgroup_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: majorgroup_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: majorgroup_set_input
    pk_columns: majorgroup_pk_columns_input!
  ): majorgroup

  """
  update data of the table: "mealtype"
  """
  update_mealtype(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mealtype_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mealtype_set_input

    """filter the rows which have to be updated"""
    where: mealtype_bool_exp!
  ): mealtype_mutation_response

  """
  update single row of the table: "mealtype"
  """
  update_mealtype_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: mealtype_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mealtype_set_input
    pk_columns: mealtype_pk_columns_input!
  ): mealtype

  """
  update data of the table: "menu"
  """
  update_menu(
    """increments the numeric columns with given value of the filtered values"""
    _inc: menu_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: menu_set_input

    """filter the rows which have to be updated"""
    where: menu_bool_exp!
  ): menu_mutation_response

  """
  update single row of the table: "menu"
  """
  update_menu_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: menu_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: menu_set_input
    pk_columns: menu_pk_columns_input!
  ): menu

  """
  update data of the table: "menuitem"
  """
  update_menuitem(
    """increments the numeric columns with given value of the filtered values"""
    _inc: menuitem_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: menuitem_set_input

    """filter the rows which have to be updated"""
    where: menuitem_bool_exp!
  ): menuitem_mutation_response

  """
  update single row of the table: "menuitem"
  """
  update_menuitem_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: menuitem_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: menuitem_set_input
    pk_columns: menuitem_pk_columns_input!
  ): menuitem

  """
  update data of the table: "paymentmethod"
  """
  update_paymentmethod(
    """increments the numeric columns with given value of the filtered values"""
    _inc: paymentmethod_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: paymentmethod_set_input

    """filter the rows which have to be updated"""
    where: paymentmethod_bool_exp!
  ): paymentmethod_mutation_response

  """
  update single row of the table: "paymentmethod"
  """
  update_paymentmethod_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: paymentmethod_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: paymentmethod_set_input
    pk_columns: paymentmethod_pk_columns_input!
  ): paymentmethod

  """
  update data of the table: "role"
  """
  update_role(
    """increments the numeric columns with given value of the filtered values"""
    _inc: role_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: role_set_input

    """filter the rows which have to be updated"""
    where: role_bool_exp!
  ): role_mutation_response

  """
  update single row of the table: "role"
  """
  update_role_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: role_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: role_set_input
    pk_columns: role_pk_columns_input!
  ): role

  """
  update data of the table: "sessions"
  """
  update_sessions(
    """sets the columns of the filtered rows to the given values"""
    _set: sessions_set_input

    """filter the rows which have to be updated"""
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  update single row of the table: "sessions"
  """
  update_sessions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: sessions_set_input
    pk_columns: sessions_pk_columns_input!
  ): sessions

  """
  update data of the table: "shift"
  """
  update_shift(
    """increments the numeric columns with given value of the filtered values"""
    _inc: shift_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: shift_set_input

    """filter the rows which have to be updated"""
    where: shift_bool_exp!
  ): shift_mutation_response

  """
  update single row of the table: "shift"
  """
  update_shift_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: shift_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: shift_set_input
    pk_columns: shift_pk_columns_input!
  ): shift

  """
  update data of the table: "specialrequest"
  """
  update_specialrequest(
    """increments the numeric columns with given value of the filtered values"""
    _inc: specialrequest_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: specialrequest_set_input

    """filter the rows which have to be updated"""
    where: specialrequest_bool_exp!
  ): specialrequest_mutation_response

  """
  update single row of the table: "specialrequest"
  """
  update_specialrequest_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: specialrequest_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: specialrequest_set_input
    pk_columns: specialrequest_pk_columns_input!
  ): specialrequest

  """
  update data of the table: "systemsetting"
  """
  update_systemsetting(
    """increments the numeric columns with given value of the filtered values"""
    _inc: systemsetting_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: systemsetting_set_input

    """filter the rows which have to be updated"""
    where: systemsetting_bool_exp!
  ): systemsetting_mutation_response

  """
  update single row of the table: "systemsetting"
  """
  update_systemsetting_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: systemsetting_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: systemsetting_set_input
    pk_columns: systemsetting_pk_columns_input!
  ): systemsetting

  """
  update data of the table: "table"
  """
  update_table(
    """increments the numeric columns with given value of the filtered values"""
    _inc: table_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: table_set_input

    """filter the rows which have to be updated"""
    where: table_bool_exp!
  ): table_mutation_response

  """
  update single row of the table: "table"
  """
  update_table_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: table_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: table_set_input
    pk_columns: table_pk_columns_input!
  ): table

  """
  update data of the table: "voidreason"
  """
  update_voidreason(
    """increments the numeric columns with given value of the filtered values"""
    _inc: voidreason_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: voidreason_set_input

    """filter the rows which have to be updated"""
    where: voidreason_bool_exp!
  ): voidreason_mutation_response

  """
  update single row of the table: "voidreason"
  """
  update_voidreason_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: voidreason_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: voidreason_set_input
    pk_columns: voidreason_pk_columns_input!
  ): voidreason

  """
  update data of the table: "worksession"
  """
  update_worksession(
    """increments the numeric columns with given value of the filtered values"""
    _inc: worksession_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: worksession_set_input

    """filter the rows which have to be updated"""
    where: worksession_bool_exp!
  ): worksession_mutation_response

  """
  update single row of the table: "worksession"
  """
  update_worksession_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: worksession_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: worksession_set_input
    pk_columns: worksession_pk_columns_input!
  ): worksession
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "paymentmethod"
"""
type paymentmethod {
  """An array relationship"""
  billpayments(
    """distinct select on columns"""
    distinct_on: [billpayment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billpayment_order_by!]

    """filter the rows returned"""
    where: billpayment_bool_exp
  ): [billpayment!]!

  """An aggregate relationship"""
  billpayments_aggregate(
    """distinct select on columns"""
    distinct_on: [billpayment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billpayment_order_by!]

    """filter the rows returned"""
    where: billpayment_bool_exp
  ): billpayment_aggregate!
  id: Int!
  name: String!
  status: basic_status!
}

"""
aggregated selection of "paymentmethod"
"""
type paymentmethod_aggregate {
  aggregate: paymentmethod_aggregate_fields
  nodes: [paymentmethod!]!
}

"""
aggregate fields of "paymentmethod"
"""
type paymentmethod_aggregate_fields {
  avg: paymentmethod_avg_fields
  count(columns: [paymentmethod_select_column!], distinct: Boolean): Int!
  max: paymentmethod_max_fields
  min: paymentmethod_min_fields
  stddev: paymentmethod_stddev_fields
  stddev_pop: paymentmethod_stddev_pop_fields
  stddev_samp: paymentmethod_stddev_samp_fields
  sum: paymentmethod_sum_fields
  var_pop: paymentmethod_var_pop_fields
  var_samp: paymentmethod_var_samp_fields
  variance: paymentmethod_variance_fields
}

"""aggregate avg on columns"""
type paymentmethod_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "paymentmethod". All fields are combined with a logical 'AND'.
"""
input paymentmethod_bool_exp {
  _and: [paymentmethod_bool_exp!]
  _not: paymentmethod_bool_exp
  _or: [paymentmethod_bool_exp!]
  billpayments: billpayment_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  status: basic_status_comparison_exp
}

"""
unique or primary key constraints on table "paymentmethod"
"""
enum paymentmethod_constraint {
  """unique or primary key constraint"""
  paymentmethod_pkey
}

"""
input type for incrementing numeric columns in table "paymentmethod"
"""
input paymentmethod_inc_input {
  id: Int
}

"""
input type for inserting data into table "paymentmethod"
"""
input paymentmethod_insert_input {
  billpayments: billpayment_arr_rel_insert_input
  id: Int
  name: String
  status: basic_status
}

"""aggregate max on columns"""
type paymentmethod_max_fields {
  id: Int
  name: String
  status: basic_status
}

"""aggregate min on columns"""
type paymentmethod_min_fields {
  id: Int
  name: String
  status: basic_status
}

"""
response of any mutation on the table "paymentmethod"
"""
type paymentmethod_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [paymentmethod!]!
}

"""
input type for inserting object relation for remote table "paymentmethod"
"""
input paymentmethod_obj_rel_insert_input {
  data: paymentmethod_insert_input!

  """upsert condition"""
  on_conflict: paymentmethod_on_conflict
}

"""
on_conflict condition type for table "paymentmethod"
"""
input paymentmethod_on_conflict {
  constraint: paymentmethod_constraint!
  update_columns: [paymentmethod_update_column!]! = []
  where: paymentmethod_bool_exp
}

"""Ordering options when selecting data from "paymentmethod"."""
input paymentmethod_order_by {
  billpayments_aggregate: billpayment_aggregate_order_by
  id: order_by
  name: order_by
  status: order_by
}

"""primary key columns input for table: paymentmethod"""
input paymentmethod_pk_columns_input {
  id: Int!
}

"""
select columns of table "paymentmethod"
"""
enum paymentmethod_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""
input type for updating data in table "paymentmethod"
"""
input paymentmethod_set_input {
  id: Int
  name: String
  status: basic_status
}

"""aggregate stddev on columns"""
type paymentmethod_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type paymentmethod_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type paymentmethod_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type paymentmethod_sum_fields {
  id: Int
}

"""
update columns of table "paymentmethod"
"""
enum paymentmethod_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type paymentmethod_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type paymentmethod_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type paymentmethod_variance_fields {
  id: Float
}

type query_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: Int!): account

  """
  fetch data from the table: "bill"
  """
  bill(
    """distinct select on columns"""
    distinct_on: [bill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bill_order_by!]

    """filter the rows returned"""
    where: bill_bool_exp
  ): [bill!]!

  """
  fetch aggregated fields from the table: "bill"
  """
  bill_aggregate(
    """distinct select on columns"""
    distinct_on: [bill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bill_order_by!]

    """filter the rows returned"""
    where: bill_bool_exp
  ): bill_aggregate!

  """fetch data from the table: "bill" using primary key columns"""
  bill_by_pk(id: Int!): bill

  """
  fetch data from the table: "billdetail"
  """
  billdetail(
    """distinct select on columns"""
    distinct_on: [billdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billdetail_order_by!]

    """filter the rows returned"""
    where: billdetail_bool_exp
  ): [billdetail!]!

  """
  fetch aggregated fields from the table: "billdetail"
  """
  billdetail_aggregate(
    """distinct select on columns"""
    distinct_on: [billdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billdetail_order_by!]

    """filter the rows returned"""
    where: billdetail_bool_exp
  ): billdetail_aggregate!

  """fetch data from the table: "billdetail" using primary key columns"""
  billdetail_by_pk(id: Int!): billdetail

  """
  fetch data from the table: "billpayment"
  """
  billpayment(
    """distinct select on columns"""
    distinct_on: [billpayment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billpayment_order_by!]

    """filter the rows returned"""
    where: billpayment_bool_exp
  ): [billpayment!]!

  """
  fetch aggregated fields from the table: "billpayment"
  """
  billpayment_aggregate(
    """distinct select on columns"""
    distinct_on: [billpayment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billpayment_order_by!]

    """filter the rows returned"""
    where: billpayment_bool_exp
  ): billpayment_aggregate!

  """fetch data from the table: "billpayment" using primary key columns"""
  billpayment_by_pk(id: Int!): billpayment

  """
  fetch data from the table: "cashierlog"
  """
  cashierlog(
    """distinct select on columns"""
    distinct_on: [cashierlog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cashierlog_order_by!]

    """filter the rows returned"""
    where: cashierlog_bool_exp
  ): [cashierlog!]!

  """
  fetch aggregated fields from the table: "cashierlog"
  """
  cashierlog_aggregate(
    """distinct select on columns"""
    distinct_on: [cashierlog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cashierlog_order_by!]

    """filter the rows returned"""
    where: cashierlog_bool_exp
  ): cashierlog_aggregate!

  """fetch data from the table: "cashierlog" using primary key columns"""
  cashierlog_by_pk(id: Int!): cashierlog

  """
  fetch data from the table: "check"
  """
  check(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): [check!]!

  """
  fetch aggregated fields from the table: "check"
  """
  check_aggregate(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): check_aggregate!

  """fetch data from the table: "check" using primary key columns"""
  check_by_pk(id: Int!): check

  """
  fetch data from the table: "checkdetail"
  """
  checkdetail(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): [checkdetail!]!

  """
  fetch aggregated fields from the table: "checkdetail"
  """
  checkdetail_aggregate(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): checkdetail_aggregate!

  """fetch data from the table: "checkdetail" using primary key columns"""
  checkdetail_by_pk(id: Int!): checkdetail

  """
  fetch data from the table: "checkdetailspecialrequest"
  """
  checkdetailspecialrequest(
    """distinct select on columns"""
    distinct_on: [checkdetailspecialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetailspecialrequest_order_by!]

    """filter the rows returned"""
    where: checkdetailspecialrequest_bool_exp
  ): [checkdetailspecialrequest!]!

  """
  fetch aggregated fields from the table: "checkdetailspecialrequest"
  """
  checkdetailspecialrequest_aggregate(
    """distinct select on columns"""
    distinct_on: [checkdetailspecialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetailspecialrequest_order_by!]

    """filter the rows returned"""
    where: checkdetailspecialrequest_bool_exp
  ): checkdetailspecialrequest_aggregate!

  """
  fetch data from the table: "checkdetailspecialrequest" using primary key columns
  """
  checkdetailspecialrequest_by_pk(id: Int!): checkdetailspecialrequest

  """
  fetch data from the table: "item"
  """
  item(
    """distinct select on columns"""
    distinct_on: [item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [item_order_by!]

    """filter the rows returned"""
    where: item_bool_exp
  ): [item!]!

  """
  fetch aggregated fields from the table: "item"
  """
  item_aggregate(
    """distinct select on columns"""
    distinct_on: [item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [item_order_by!]

    """filter the rows returned"""
    where: item_bool_exp
  ): item_aggregate!

  """fetch data from the table: "item" using primary key columns"""
  item_by_pk(id: Int!): item

  """
  fetch data from the table: "itemoutofstock"
  """
  itemoutofstock(
    """distinct select on columns"""
    distinct_on: [itemoutofstock_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [itemoutofstock_order_by!]

    """filter the rows returned"""
    where: itemoutofstock_bool_exp
  ): [itemoutofstock!]!

  """
  fetch aggregated fields from the table: "itemoutofstock"
  """
  itemoutofstock_aggregate(
    """distinct select on columns"""
    distinct_on: [itemoutofstock_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [itemoutofstock_order_by!]

    """filter the rows returned"""
    where: itemoutofstock_bool_exp
  ): itemoutofstock_aggregate!

  """fetch data from the table: "itemoutofstock" using primary key columns"""
  itemoutofstock_by_pk(id: Int!): itemoutofstock

  """
  fetch data from the table: "location"
  """
  location(
    """distinct select on columns"""
    distinct_on: [location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [location_order_by!]

    """filter the rows returned"""
    where: location_bool_exp
  ): [location!]!

  """
  fetch aggregated fields from the table: "location"
  """
  location_aggregate(
    """distinct select on columns"""
    distinct_on: [location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [location_order_by!]

    """filter the rows returned"""
    where: location_bool_exp
  ): location_aggregate!

  """fetch data from the table: "location" using primary key columns"""
  location_by_pk(id: Int!): location

  """
  fetch data from the table: "majorgroup"
  """
  majorgroup(
    """distinct select on columns"""
    distinct_on: [majorgroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [majorgroup_order_by!]

    """filter the rows returned"""
    where: majorgroup_bool_exp
  ): [majorgroup!]!

  """
  fetch aggregated fields from the table: "majorgroup"
  """
  majorgroup_aggregate(
    """distinct select on columns"""
    distinct_on: [majorgroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [majorgroup_order_by!]

    """filter the rows returned"""
    where: majorgroup_bool_exp
  ): majorgroup_aggregate!

  """fetch data from the table: "majorgroup" using primary key columns"""
  majorgroup_by_pk(id: Int!): majorgroup

  """
  fetch data from the table: "mealtype"
  """
  mealtype(
    """distinct select on columns"""
    distinct_on: [mealtype_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mealtype_order_by!]

    """filter the rows returned"""
    where: mealtype_bool_exp
  ): [mealtype!]!

  """
  fetch aggregated fields from the table: "mealtype"
  """
  mealtype_aggregate(
    """distinct select on columns"""
    distinct_on: [mealtype_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mealtype_order_by!]

    """filter the rows returned"""
    where: mealtype_bool_exp
  ): mealtype_aggregate!

  """fetch data from the table: "mealtype" using primary key columns"""
  mealtype_by_pk(id: Int!): mealtype

  """
  fetch data from the table: "menu"
  """
  menu(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): [menu!]!

  """
  fetch aggregated fields from the table: "menu"
  """
  menu_aggregate(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): menu_aggregate!

  """fetch data from the table: "menu" using primary key columns"""
  menu_by_pk(id: Int!): menu

  """
  fetch data from the table: "menuitem"
  """
  menuitem(
    """distinct select on columns"""
    distinct_on: [menuitem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menuitem_order_by!]

    """filter the rows returned"""
    where: menuitem_bool_exp
  ): [menuitem!]!

  """
  fetch aggregated fields from the table: "menuitem"
  """
  menuitem_aggregate(
    """distinct select on columns"""
    distinct_on: [menuitem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menuitem_order_by!]

    """filter the rows returned"""
    where: menuitem_bool_exp
  ): menuitem_aggregate!

  """fetch data from the table: "menuitem" using primary key columns"""
  menuitem_by_pk(id: Int!): menuitem

  """
  fetch data from the table: "paymentmethod"
  """
  paymentmethod(
    """distinct select on columns"""
    distinct_on: [paymentmethod_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [paymentmethod_order_by!]

    """filter the rows returned"""
    where: paymentmethod_bool_exp
  ): [paymentmethod!]!

  """
  fetch aggregated fields from the table: "paymentmethod"
  """
  paymentmethod_aggregate(
    """distinct select on columns"""
    distinct_on: [paymentmethod_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [paymentmethod_order_by!]

    """filter the rows returned"""
    where: paymentmethod_bool_exp
  ): paymentmethod_aggregate!

  """fetch data from the table: "paymentmethod" using primary key columns"""
  paymentmethod_by_pk(id: Int!): paymentmethod

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): [role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  role_aggregate(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): role_aggregate!

  """fetch data from the table: "role" using primary key columns"""
  role_by_pk(id: Int!): role

  """
  fetch data from the table: "sessions"
  """
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """
  fetch aggregated fields from the table: "sessions"
  """
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!

  """fetch data from the table: "sessions" using primary key columns"""
  sessions_by_pk(sid: String!): sessions

  """
  fetch data from the table: "shift"
  """
  shift(
    """distinct select on columns"""
    distinct_on: [shift_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shift_order_by!]

    """filter the rows returned"""
    where: shift_bool_exp
  ): [shift!]!

  """
  fetch aggregated fields from the table: "shift"
  """
  shift_aggregate(
    """distinct select on columns"""
    distinct_on: [shift_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shift_order_by!]

    """filter the rows returned"""
    where: shift_bool_exp
  ): shift_aggregate!

  """fetch data from the table: "shift" using primary key columns"""
  shift_by_pk(id: Int!): shift

  """
  fetch data from the table: "specialrequest"
  """
  specialrequest(
    """distinct select on columns"""
    distinct_on: [specialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [specialrequest_order_by!]

    """filter the rows returned"""
    where: specialrequest_bool_exp
  ): [specialrequest!]!

  """
  fetch aggregated fields from the table: "specialrequest"
  """
  specialrequest_aggregate(
    """distinct select on columns"""
    distinct_on: [specialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [specialrequest_order_by!]

    """filter the rows returned"""
    where: specialrequest_bool_exp
  ): specialrequest_aggregate!

  """fetch data from the table: "specialrequest" using primary key columns"""
  specialrequest_by_pk(id: Int!): specialrequest

  """
  fetch data from the table: "systemsetting"
  """
  systemsetting(
    """distinct select on columns"""
    distinct_on: [systemsetting_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [systemsetting_order_by!]

    """filter the rows returned"""
    where: systemsetting_bool_exp
  ): [systemsetting!]!

  """
  fetch aggregated fields from the table: "systemsetting"
  """
  systemsetting_aggregate(
    """distinct select on columns"""
    distinct_on: [systemsetting_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [systemsetting_order_by!]

    """filter the rows returned"""
    where: systemsetting_bool_exp
  ): systemsetting_aggregate!

  """fetch data from the table: "systemsetting" using primary key columns"""
  systemsetting_by_pk(id: Int!): systemsetting

  """
  fetch data from the table: "table"
  """
  table(
    """distinct select on columns"""
    distinct_on: [table_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [table_order_by!]

    """filter the rows returned"""
    where: table_bool_exp
  ): [table!]!

  """
  fetch aggregated fields from the table: "table"
  """
  table_aggregate(
    """distinct select on columns"""
    distinct_on: [table_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [table_order_by!]

    """filter the rows returned"""
    where: table_bool_exp
  ): table_aggregate!

  """fetch data from the table: "table" using primary key columns"""
  table_by_pk(id: Int!): table

  """
  fetch data from the table: "voidreason"
  """
  voidreason(
    """distinct select on columns"""
    distinct_on: [voidreason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voidreason_order_by!]

    """filter the rows returned"""
    where: voidreason_bool_exp
  ): [voidreason!]!

  """
  fetch aggregated fields from the table: "voidreason"
  """
  voidreason_aggregate(
    """distinct select on columns"""
    distinct_on: [voidreason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voidreason_order_by!]

    """filter the rows returned"""
    where: voidreason_bool_exp
  ): voidreason_aggregate!

  """fetch data from the table: "voidreason" using primary key columns"""
  voidreason_by_pk(id: Int!): voidreason

  """
  fetch data from the table: "worksession"
  """
  worksession(
    """distinct select on columns"""
    distinct_on: [worksession_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [worksession_order_by!]

    """filter the rows returned"""
    where: worksession_bool_exp
  ): [worksession!]!

  """
  fetch aggregated fields from the table: "worksession"
  """
  worksession_aggregate(
    """distinct select on columns"""
    distinct_on: [worksession_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [worksession_order_by!]

    """filter the rows returned"""
    where: worksession_bool_exp
  ): worksession_aggregate!

  """fetch data from the table: "worksession" using primary key columns"""
  worksession_by_pk(id: Int!): worksession
}

"""
columns and relationships of "role"
"""
type role {
  """An array relationship"""
  accounts(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """An aggregate relationship"""
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!
  id: Int!
  name: String!
}

"""
aggregated selection of "role"
"""
type role_aggregate {
  aggregate: role_aggregate_fields
  nodes: [role!]!
}

"""
aggregate fields of "role"
"""
type role_aggregate_fields {
  avg: role_avg_fields
  count(columns: [role_select_column!], distinct: Boolean): Int!
  max: role_max_fields
  min: role_min_fields
  stddev: role_stddev_fields
  stddev_pop: role_stddev_pop_fields
  stddev_samp: role_stddev_samp_fields
  sum: role_sum_fields
  var_pop: role_var_pop_fields
  var_samp: role_var_samp_fields
  variance: role_variance_fields
}

"""aggregate avg on columns"""
type role_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "role". All fields are combined with a logical 'AND'.
"""
input role_bool_exp {
  _and: [role_bool_exp!]
  _not: role_bool_exp
  _or: [role_bool_exp!]
  accounts: account_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "role"
"""
enum role_constraint {
  """unique or primary key constraint"""
  role_name_key

  """unique or primary key constraint"""
  role_pkey
}

"""
input type for incrementing numeric columns in table "role"
"""
input role_inc_input {
  id: Int
}

"""
input type for inserting data into table "role"
"""
input role_insert_input {
  accounts: account_arr_rel_insert_input
  id: Int
  name: String
}

"""aggregate max on columns"""
type role_max_fields {
  id: Int
  name: String
}

"""aggregate min on columns"""
type role_min_fields {
  id: Int
  name: String
}

"""
response of any mutation on the table "role"
"""
type role_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [role!]!
}

"""
input type for inserting object relation for remote table "role"
"""
input role_obj_rel_insert_input {
  data: role_insert_input!

  """upsert condition"""
  on_conflict: role_on_conflict
}

"""
on_conflict condition type for table "role"
"""
input role_on_conflict {
  constraint: role_constraint!
  update_columns: [role_update_column!]! = []
  where: role_bool_exp
}

"""Ordering options when selecting data from "role"."""
input role_order_by {
  accounts_aggregate: account_aggregate_order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: role"""
input role_pk_columns_input {
  id: Int!
}

"""
select columns of table "role"
"""
enum role_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "role"
"""
input role_set_input {
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type role_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type role_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type role_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type role_sum_fields {
  id: Int
}

"""
update columns of table "role"
"""
enum role_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type role_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type role_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type role_variance_fields {
  id: Float
}

"""
columns and relationships of "sessions"
"""
type sessions {
  expired: timestamp!
  sess(
    """JSON select path"""
    path: String
  ): json!
  sid: String!
}

"""
aggregated selection of "sessions"
"""
type sessions_aggregate {
  aggregate: sessions_aggregate_fields
  nodes: [sessions!]!
}

"""
aggregate fields of "sessions"
"""
type sessions_aggregate_fields {
  count(columns: [sessions_select_column!], distinct: Boolean): Int!
  max: sessions_max_fields
  min: sessions_min_fields
}

"""
Boolean expression to filter rows from the table "sessions". All fields are combined with a logical 'AND'.
"""
input sessions_bool_exp {
  _and: [sessions_bool_exp!]
  _not: sessions_bool_exp
  _or: [sessions_bool_exp!]
  expired: timestamp_comparison_exp
  sess: json_comparison_exp
  sid: String_comparison_exp
}

"""
unique or primary key constraints on table "sessions"
"""
enum sessions_constraint {
  """unique or primary key constraint"""
  sessions_pkey
}

"""
input type for inserting data into table "sessions"
"""
input sessions_insert_input {
  expired: timestamp
  sess: json
  sid: String
}

"""aggregate max on columns"""
type sessions_max_fields {
  expired: timestamp
  sid: String
}

"""aggregate min on columns"""
type sessions_min_fields {
  expired: timestamp
  sid: String
}

"""
response of any mutation on the table "sessions"
"""
type sessions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sessions!]!
}

"""
on_conflict condition type for table "sessions"
"""
input sessions_on_conflict {
  constraint: sessions_constraint!
  update_columns: [sessions_update_column!]! = []
  where: sessions_bool_exp
}

"""Ordering options when selecting data from "sessions"."""
input sessions_order_by {
  expired: order_by
  sess: order_by
  sid: order_by
}

"""primary key columns input for table: sessions"""
input sessions_pk_columns_input {
  sid: String!
}

"""
select columns of table "sessions"
"""
enum sessions_select_column {
  """column name"""
  expired

  """column name"""
  sess

  """column name"""
  sid
}

"""
input type for updating data in table "sessions"
"""
input sessions_set_input {
  expired: timestamp
  sess: json
  sid: String
}

"""
update columns of table "sessions"
"""
enum sessions_update_column {
  """column name"""
  expired

  """column name"""
  sess

  """column name"""
  sid
}

"""
columns and relationships of "shift"
"""
type shift {
  """An array relationship"""
  cashierlogs(
    """distinct select on columns"""
    distinct_on: [cashierlog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cashierlog_order_by!]

    """filter the rows returned"""
    where: cashierlog_bool_exp
  ): [cashierlog!]!

  """An aggregate relationship"""
  cashierlogs_aggregate(
    """distinct select on columns"""
    distinct_on: [cashierlog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cashierlog_order_by!]

    """filter the rows returned"""
    where: cashierlog_bool_exp
  ): cashierlog_aggregate!

  """An array relationship"""
  checks(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): [check!]!

  """An aggregate relationship"""
  checks_aggregate(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): check_aggregate!
  closerid: Int
  endtime: time!
  id: Int!
  isopen: Boolean!
  name: String!
  openerid: Int
  starttime: time!
  status: basic_status!

  """An object relationship"""
  worksession: worksession!
  worksessionid: Int!
}

"""
aggregated selection of "shift"
"""
type shift_aggregate {
  aggregate: shift_aggregate_fields
  nodes: [shift!]!
}

"""
aggregate fields of "shift"
"""
type shift_aggregate_fields {
  avg: shift_avg_fields
  count(columns: [shift_select_column!], distinct: Boolean): Int!
  max: shift_max_fields
  min: shift_min_fields
  stddev: shift_stddev_fields
  stddev_pop: shift_stddev_pop_fields
  stddev_samp: shift_stddev_samp_fields
  sum: shift_sum_fields
  var_pop: shift_var_pop_fields
  var_samp: shift_var_samp_fields
  variance: shift_variance_fields
}

"""
order by aggregate values of table "shift"
"""
input shift_aggregate_order_by {
  avg: shift_avg_order_by
  count: order_by
  max: shift_max_order_by
  min: shift_min_order_by
  stddev: shift_stddev_order_by
  stddev_pop: shift_stddev_pop_order_by
  stddev_samp: shift_stddev_samp_order_by
  sum: shift_sum_order_by
  var_pop: shift_var_pop_order_by
  var_samp: shift_var_samp_order_by
  variance: shift_variance_order_by
}

"""
input type for inserting array relation for remote table "shift"
"""
input shift_arr_rel_insert_input {
  data: [shift_insert_input!]!

  """upsert condition"""
  on_conflict: shift_on_conflict
}

"""aggregate avg on columns"""
type shift_avg_fields {
  closerid: Float
  id: Float
  openerid: Float
  worksessionid: Float
}

"""
order by avg() on columns of table "shift"
"""
input shift_avg_order_by {
  closerid: order_by
  id: order_by
  openerid: order_by
  worksessionid: order_by
}

"""
Boolean expression to filter rows from the table "shift". All fields are combined with a logical 'AND'.
"""
input shift_bool_exp {
  _and: [shift_bool_exp!]
  _not: shift_bool_exp
  _or: [shift_bool_exp!]
  cashierlogs: cashierlog_bool_exp
  checks: check_bool_exp
  closerid: Int_comparison_exp
  endtime: time_comparison_exp
  id: Int_comparison_exp
  isopen: Boolean_comparison_exp
  name: String_comparison_exp
  openerid: Int_comparison_exp
  starttime: time_comparison_exp
  status: basic_status_comparison_exp
  worksession: worksession_bool_exp
  worksessionid: Int_comparison_exp
}

"""
unique or primary key constraints on table "shift"
"""
enum shift_constraint {
  """unique or primary key constraint"""
  shift_pkey
}

"""
input type for incrementing numeric columns in table "shift"
"""
input shift_inc_input {
  closerid: Int
  id: Int
  openerid: Int
  worksessionid: Int
}

"""
input type for inserting data into table "shift"
"""
input shift_insert_input {
  cashierlogs: cashierlog_arr_rel_insert_input
  checks: check_arr_rel_insert_input
  closerid: Int
  endtime: time
  id: Int
  isopen: Boolean
  name: String
  openerid: Int
  starttime: time
  status: basic_status
  worksession: worksession_obj_rel_insert_input
  worksessionid: Int
}

"""aggregate max on columns"""
type shift_max_fields {
  closerid: Int
  id: Int
  name: String
  openerid: Int
  status: basic_status
  worksessionid: Int
}

"""
order by max() on columns of table "shift"
"""
input shift_max_order_by {
  closerid: order_by
  id: order_by
  name: order_by
  openerid: order_by
  status: order_by
  worksessionid: order_by
}

"""aggregate min on columns"""
type shift_min_fields {
  closerid: Int
  id: Int
  name: String
  openerid: Int
  status: basic_status
  worksessionid: Int
}

"""
order by min() on columns of table "shift"
"""
input shift_min_order_by {
  closerid: order_by
  id: order_by
  name: order_by
  openerid: order_by
  status: order_by
  worksessionid: order_by
}

"""
response of any mutation on the table "shift"
"""
type shift_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [shift!]!
}

"""
input type for inserting object relation for remote table "shift"
"""
input shift_obj_rel_insert_input {
  data: shift_insert_input!

  """upsert condition"""
  on_conflict: shift_on_conflict
}

"""
on_conflict condition type for table "shift"
"""
input shift_on_conflict {
  constraint: shift_constraint!
  update_columns: [shift_update_column!]! = []
  where: shift_bool_exp
}

"""Ordering options when selecting data from "shift"."""
input shift_order_by {
  cashierlogs_aggregate: cashierlog_aggregate_order_by
  checks_aggregate: check_aggregate_order_by
  closerid: order_by
  endtime: order_by
  id: order_by
  isopen: order_by
  name: order_by
  openerid: order_by
  starttime: order_by
  status: order_by
  worksession: worksession_order_by
  worksessionid: order_by
}

"""primary key columns input for table: shift"""
input shift_pk_columns_input {
  id: Int!
}

"""
select columns of table "shift"
"""
enum shift_select_column {
  """column name"""
  closerid

  """column name"""
  endtime

  """column name"""
  id

  """column name"""
  isopen

  """column name"""
  name

  """column name"""
  openerid

  """column name"""
  starttime

  """column name"""
  status

  """column name"""
  worksessionid
}

"""
input type for updating data in table "shift"
"""
input shift_set_input {
  closerid: Int
  endtime: time
  id: Int
  isopen: Boolean
  name: String
  openerid: Int
  starttime: time
  status: basic_status
  worksessionid: Int
}

"""aggregate stddev on columns"""
type shift_stddev_fields {
  closerid: Float
  id: Float
  openerid: Float
  worksessionid: Float
}

"""
order by stddev() on columns of table "shift"
"""
input shift_stddev_order_by {
  closerid: order_by
  id: order_by
  openerid: order_by
  worksessionid: order_by
}

"""aggregate stddev_pop on columns"""
type shift_stddev_pop_fields {
  closerid: Float
  id: Float
  openerid: Float
  worksessionid: Float
}

"""
order by stddev_pop() on columns of table "shift"
"""
input shift_stddev_pop_order_by {
  closerid: order_by
  id: order_by
  openerid: order_by
  worksessionid: order_by
}

"""aggregate stddev_samp on columns"""
type shift_stddev_samp_fields {
  closerid: Float
  id: Float
  openerid: Float
  worksessionid: Float
}

"""
order by stddev_samp() on columns of table "shift"
"""
input shift_stddev_samp_order_by {
  closerid: order_by
  id: order_by
  openerid: order_by
  worksessionid: order_by
}

"""aggregate sum on columns"""
type shift_sum_fields {
  closerid: Int
  id: Int
  openerid: Int
  worksessionid: Int
}

"""
order by sum() on columns of table "shift"
"""
input shift_sum_order_by {
  closerid: order_by
  id: order_by
  openerid: order_by
  worksessionid: order_by
}

"""
update columns of table "shift"
"""
enum shift_update_column {
  """column name"""
  closerid

  """column name"""
  endtime

  """column name"""
  id

  """column name"""
  isopen

  """column name"""
  name

  """column name"""
  openerid

  """column name"""
  starttime

  """column name"""
  status

  """column name"""
  worksessionid
}

"""aggregate var_pop on columns"""
type shift_var_pop_fields {
  closerid: Float
  id: Float
  openerid: Float
  worksessionid: Float
}

"""
order by var_pop() on columns of table "shift"
"""
input shift_var_pop_order_by {
  closerid: order_by
  id: order_by
  openerid: order_by
  worksessionid: order_by
}

"""aggregate var_samp on columns"""
type shift_var_samp_fields {
  closerid: Float
  id: Float
  openerid: Float
  worksessionid: Float
}

"""
order by var_samp() on columns of table "shift"
"""
input shift_var_samp_order_by {
  closerid: order_by
  id: order_by
  openerid: order_by
  worksessionid: order_by
}

"""aggregate variance on columns"""
type shift_variance_fields {
  closerid: Float
  id: Float
  openerid: Float
  worksessionid: Float
}

"""
order by variance() on columns of table "shift"
"""
input shift_variance_order_by {
  closerid: order_by
  id: order_by
  openerid: order_by
  worksessionid: order_by
}

"""
columns and relationships of "specialrequest"
"""
type specialrequest {
  """An array relationship"""
  checkdetailspecialrequests(
    """distinct select on columns"""
    distinct_on: [checkdetailspecialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetailspecialrequest_order_by!]

    """filter the rows returned"""
    where: checkdetailspecialrequest_bool_exp
  ): [checkdetailspecialrequest!]!

  """An aggregate relationship"""
  checkdetailspecialrequests_aggregate(
    """distinct select on columns"""
    distinct_on: [checkdetailspecialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetailspecialrequest_order_by!]

    """filter the rows returned"""
    where: checkdetailspecialrequest_bool_exp
  ): checkdetailspecialrequest_aggregate!
  id: Int!

  """An object relationship"""
  majorgroup: majorgroup!
  majorgroupid: Int!
  name: String!
  status: basic_status!
}

"""
aggregated selection of "specialrequest"
"""
type specialrequest_aggregate {
  aggregate: specialrequest_aggregate_fields
  nodes: [specialrequest!]!
}

"""
aggregate fields of "specialrequest"
"""
type specialrequest_aggregate_fields {
  avg: specialrequest_avg_fields
  count(columns: [specialrequest_select_column!], distinct: Boolean): Int!
  max: specialrequest_max_fields
  min: specialrequest_min_fields
  stddev: specialrequest_stddev_fields
  stddev_pop: specialrequest_stddev_pop_fields
  stddev_samp: specialrequest_stddev_samp_fields
  sum: specialrequest_sum_fields
  var_pop: specialrequest_var_pop_fields
  var_samp: specialrequest_var_samp_fields
  variance: specialrequest_variance_fields
}

"""
order by aggregate values of table "specialrequest"
"""
input specialrequest_aggregate_order_by {
  avg: specialrequest_avg_order_by
  count: order_by
  max: specialrequest_max_order_by
  min: specialrequest_min_order_by
  stddev: specialrequest_stddev_order_by
  stddev_pop: specialrequest_stddev_pop_order_by
  stddev_samp: specialrequest_stddev_samp_order_by
  sum: specialrequest_sum_order_by
  var_pop: specialrequest_var_pop_order_by
  var_samp: specialrequest_var_samp_order_by
  variance: specialrequest_variance_order_by
}

"""
input type for inserting array relation for remote table "specialrequest"
"""
input specialrequest_arr_rel_insert_input {
  data: [specialrequest_insert_input!]!

  """upsert condition"""
  on_conflict: specialrequest_on_conflict
}

"""aggregate avg on columns"""
type specialrequest_avg_fields {
  id: Float
  majorgroupid: Float
}

"""
order by avg() on columns of table "specialrequest"
"""
input specialrequest_avg_order_by {
  id: order_by
  majorgroupid: order_by
}

"""
Boolean expression to filter rows from the table "specialrequest". All fields are combined with a logical 'AND'.
"""
input specialrequest_bool_exp {
  _and: [specialrequest_bool_exp!]
  _not: specialrequest_bool_exp
  _or: [specialrequest_bool_exp!]
  checkdetailspecialrequests: checkdetailspecialrequest_bool_exp
  id: Int_comparison_exp
  majorgroup: majorgroup_bool_exp
  majorgroupid: Int_comparison_exp
  name: String_comparison_exp
  status: basic_status_comparison_exp
}

"""
unique or primary key constraints on table "specialrequest"
"""
enum specialrequest_constraint {
  """unique or primary key constraint"""
  specialrequest_pkey
}

"""
input type for incrementing numeric columns in table "specialrequest"
"""
input specialrequest_inc_input {
  id: Int
  majorgroupid: Int
}

"""
input type for inserting data into table "specialrequest"
"""
input specialrequest_insert_input {
  checkdetailspecialrequests: checkdetailspecialrequest_arr_rel_insert_input
  id: Int
  majorgroup: majorgroup_obj_rel_insert_input
  majorgroupid: Int
  name: String
  status: basic_status
}

"""aggregate max on columns"""
type specialrequest_max_fields {
  id: Int
  majorgroupid: Int
  name: String
  status: basic_status
}

"""
order by max() on columns of table "specialrequest"
"""
input specialrequest_max_order_by {
  id: order_by
  majorgroupid: order_by
  name: order_by
  status: order_by
}

"""aggregate min on columns"""
type specialrequest_min_fields {
  id: Int
  majorgroupid: Int
  name: String
  status: basic_status
}

"""
order by min() on columns of table "specialrequest"
"""
input specialrequest_min_order_by {
  id: order_by
  majorgroupid: order_by
  name: order_by
  status: order_by
}

"""
response of any mutation on the table "specialrequest"
"""
type specialrequest_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [specialrequest!]!
}

"""
input type for inserting object relation for remote table "specialrequest"
"""
input specialrequest_obj_rel_insert_input {
  data: specialrequest_insert_input!

  """upsert condition"""
  on_conflict: specialrequest_on_conflict
}

"""
on_conflict condition type for table "specialrequest"
"""
input specialrequest_on_conflict {
  constraint: specialrequest_constraint!
  update_columns: [specialrequest_update_column!]! = []
  where: specialrequest_bool_exp
}

"""Ordering options when selecting data from "specialrequest"."""
input specialrequest_order_by {
  checkdetailspecialrequests_aggregate: checkdetailspecialrequest_aggregate_order_by
  id: order_by
  majorgroup: majorgroup_order_by
  majorgroupid: order_by
  name: order_by
  status: order_by
}

"""primary key columns input for table: specialrequest"""
input specialrequest_pk_columns_input {
  id: Int!
}

"""
select columns of table "specialrequest"
"""
enum specialrequest_select_column {
  """column name"""
  id

  """column name"""
  majorgroupid

  """column name"""
  name

  """column name"""
  status
}

"""
input type for updating data in table "specialrequest"
"""
input specialrequest_set_input {
  id: Int
  majorgroupid: Int
  name: String
  status: basic_status
}

"""aggregate stddev on columns"""
type specialrequest_stddev_fields {
  id: Float
  majorgroupid: Float
}

"""
order by stddev() on columns of table "specialrequest"
"""
input specialrequest_stddev_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate stddev_pop on columns"""
type specialrequest_stddev_pop_fields {
  id: Float
  majorgroupid: Float
}

"""
order by stddev_pop() on columns of table "specialrequest"
"""
input specialrequest_stddev_pop_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate stddev_samp on columns"""
type specialrequest_stddev_samp_fields {
  id: Float
  majorgroupid: Float
}

"""
order by stddev_samp() on columns of table "specialrequest"
"""
input specialrequest_stddev_samp_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate sum on columns"""
type specialrequest_sum_fields {
  id: Int
  majorgroupid: Int
}

"""
order by sum() on columns of table "specialrequest"
"""
input specialrequest_sum_order_by {
  id: order_by
  majorgroupid: order_by
}

"""
update columns of table "specialrequest"
"""
enum specialrequest_update_column {
  """column name"""
  id

  """column name"""
  majorgroupid

  """column name"""
  name

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type specialrequest_var_pop_fields {
  id: Float
  majorgroupid: Float
}

"""
order by var_pop() on columns of table "specialrequest"
"""
input specialrequest_var_pop_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate var_samp on columns"""
type specialrequest_var_samp_fields {
  id: Float
  majorgroupid: Float
}

"""
order by var_samp() on columns of table "specialrequest"
"""
input specialrequest_var_samp_order_by {
  id: order_by
  majorgroupid: order_by
}

"""aggregate variance on columns"""
type specialrequest_variance_fields {
  id: Float
  majorgroupid: Float
}

"""
order by variance() on columns of table "specialrequest"
"""
input specialrequest_variance_order_by {
  id: order_by
  majorgroupid: order_by
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: Int!): account

  """
  fetch data from the table: "bill"
  """
  bill(
    """distinct select on columns"""
    distinct_on: [bill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bill_order_by!]

    """filter the rows returned"""
    where: bill_bool_exp
  ): [bill!]!

  """
  fetch aggregated fields from the table: "bill"
  """
  bill_aggregate(
    """distinct select on columns"""
    distinct_on: [bill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bill_order_by!]

    """filter the rows returned"""
    where: bill_bool_exp
  ): bill_aggregate!

  """fetch data from the table: "bill" using primary key columns"""
  bill_by_pk(id: Int!): bill

  """
  fetch data from the table: "billdetail"
  """
  billdetail(
    """distinct select on columns"""
    distinct_on: [billdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billdetail_order_by!]

    """filter the rows returned"""
    where: billdetail_bool_exp
  ): [billdetail!]!

  """
  fetch aggregated fields from the table: "billdetail"
  """
  billdetail_aggregate(
    """distinct select on columns"""
    distinct_on: [billdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billdetail_order_by!]

    """filter the rows returned"""
    where: billdetail_bool_exp
  ): billdetail_aggregate!

  """fetch data from the table: "billdetail" using primary key columns"""
  billdetail_by_pk(id: Int!): billdetail

  """
  fetch data from the table: "billpayment"
  """
  billpayment(
    """distinct select on columns"""
    distinct_on: [billpayment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billpayment_order_by!]

    """filter the rows returned"""
    where: billpayment_bool_exp
  ): [billpayment!]!

  """
  fetch aggregated fields from the table: "billpayment"
  """
  billpayment_aggregate(
    """distinct select on columns"""
    distinct_on: [billpayment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [billpayment_order_by!]

    """filter the rows returned"""
    where: billpayment_bool_exp
  ): billpayment_aggregate!

  """fetch data from the table: "billpayment" using primary key columns"""
  billpayment_by_pk(id: Int!): billpayment

  """
  fetch data from the table: "cashierlog"
  """
  cashierlog(
    """distinct select on columns"""
    distinct_on: [cashierlog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cashierlog_order_by!]

    """filter the rows returned"""
    where: cashierlog_bool_exp
  ): [cashierlog!]!

  """
  fetch aggregated fields from the table: "cashierlog"
  """
  cashierlog_aggregate(
    """distinct select on columns"""
    distinct_on: [cashierlog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cashierlog_order_by!]

    """filter the rows returned"""
    where: cashierlog_bool_exp
  ): cashierlog_aggregate!

  """fetch data from the table: "cashierlog" using primary key columns"""
  cashierlog_by_pk(id: Int!): cashierlog

  """
  fetch data from the table: "check"
  """
  check(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): [check!]!

  """
  fetch aggregated fields from the table: "check"
  """
  check_aggregate(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): check_aggregate!

  """fetch data from the table: "check" using primary key columns"""
  check_by_pk(id: Int!): check

  """
  fetch data from the table: "checkdetail"
  """
  checkdetail(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): [checkdetail!]!

  """
  fetch aggregated fields from the table: "checkdetail"
  """
  checkdetail_aggregate(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): checkdetail_aggregate!

  """fetch data from the table: "checkdetail" using primary key columns"""
  checkdetail_by_pk(id: Int!): checkdetail

  """
  fetch data from the table: "checkdetailspecialrequest"
  """
  checkdetailspecialrequest(
    """distinct select on columns"""
    distinct_on: [checkdetailspecialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetailspecialrequest_order_by!]

    """filter the rows returned"""
    where: checkdetailspecialrequest_bool_exp
  ): [checkdetailspecialrequest!]!

  """
  fetch aggregated fields from the table: "checkdetailspecialrequest"
  """
  checkdetailspecialrequest_aggregate(
    """distinct select on columns"""
    distinct_on: [checkdetailspecialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetailspecialrequest_order_by!]

    """filter the rows returned"""
    where: checkdetailspecialrequest_bool_exp
  ): checkdetailspecialrequest_aggregate!

  """
  fetch data from the table: "checkdetailspecialrequest" using primary key columns
  """
  checkdetailspecialrequest_by_pk(id: Int!): checkdetailspecialrequest

  """
  fetch data from the table: "item"
  """
  item(
    """distinct select on columns"""
    distinct_on: [item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [item_order_by!]

    """filter the rows returned"""
    where: item_bool_exp
  ): [item!]!

  """
  fetch aggregated fields from the table: "item"
  """
  item_aggregate(
    """distinct select on columns"""
    distinct_on: [item_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [item_order_by!]

    """filter the rows returned"""
    where: item_bool_exp
  ): item_aggregate!

  """fetch data from the table: "item" using primary key columns"""
  item_by_pk(id: Int!): item

  """
  fetch data from the table: "itemoutofstock"
  """
  itemoutofstock(
    """distinct select on columns"""
    distinct_on: [itemoutofstock_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [itemoutofstock_order_by!]

    """filter the rows returned"""
    where: itemoutofstock_bool_exp
  ): [itemoutofstock!]!

  """
  fetch aggregated fields from the table: "itemoutofstock"
  """
  itemoutofstock_aggregate(
    """distinct select on columns"""
    distinct_on: [itemoutofstock_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [itemoutofstock_order_by!]

    """filter the rows returned"""
    where: itemoutofstock_bool_exp
  ): itemoutofstock_aggregate!

  """fetch data from the table: "itemoutofstock" using primary key columns"""
  itemoutofstock_by_pk(id: Int!): itemoutofstock

  """
  fetch data from the table: "location"
  """
  location(
    """distinct select on columns"""
    distinct_on: [location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [location_order_by!]

    """filter the rows returned"""
    where: location_bool_exp
  ): [location!]!

  """
  fetch aggregated fields from the table: "location"
  """
  location_aggregate(
    """distinct select on columns"""
    distinct_on: [location_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [location_order_by!]

    """filter the rows returned"""
    where: location_bool_exp
  ): location_aggregate!

  """fetch data from the table: "location" using primary key columns"""
  location_by_pk(id: Int!): location

  """
  fetch data from the table: "majorgroup"
  """
  majorgroup(
    """distinct select on columns"""
    distinct_on: [majorgroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [majorgroup_order_by!]

    """filter the rows returned"""
    where: majorgroup_bool_exp
  ): [majorgroup!]!

  """
  fetch aggregated fields from the table: "majorgroup"
  """
  majorgroup_aggregate(
    """distinct select on columns"""
    distinct_on: [majorgroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [majorgroup_order_by!]

    """filter the rows returned"""
    where: majorgroup_bool_exp
  ): majorgroup_aggregate!

  """fetch data from the table: "majorgroup" using primary key columns"""
  majorgroup_by_pk(id: Int!): majorgroup

  """
  fetch data from the table: "mealtype"
  """
  mealtype(
    """distinct select on columns"""
    distinct_on: [mealtype_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mealtype_order_by!]

    """filter the rows returned"""
    where: mealtype_bool_exp
  ): [mealtype!]!

  """
  fetch aggregated fields from the table: "mealtype"
  """
  mealtype_aggregate(
    """distinct select on columns"""
    distinct_on: [mealtype_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mealtype_order_by!]

    """filter the rows returned"""
    where: mealtype_bool_exp
  ): mealtype_aggregate!

  """fetch data from the table: "mealtype" using primary key columns"""
  mealtype_by_pk(id: Int!): mealtype

  """
  fetch data from the table: "menu"
  """
  menu(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): [menu!]!

  """
  fetch aggregated fields from the table: "menu"
  """
  menu_aggregate(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): menu_aggregate!

  """fetch data from the table: "menu" using primary key columns"""
  menu_by_pk(id: Int!): menu

  """
  fetch data from the table: "menuitem"
  """
  menuitem(
    """distinct select on columns"""
    distinct_on: [menuitem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menuitem_order_by!]

    """filter the rows returned"""
    where: menuitem_bool_exp
  ): [menuitem!]!

  """
  fetch aggregated fields from the table: "menuitem"
  """
  menuitem_aggregate(
    """distinct select on columns"""
    distinct_on: [menuitem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menuitem_order_by!]

    """filter the rows returned"""
    where: menuitem_bool_exp
  ): menuitem_aggregate!

  """fetch data from the table: "menuitem" using primary key columns"""
  menuitem_by_pk(id: Int!): menuitem

  """
  fetch data from the table: "paymentmethod"
  """
  paymentmethod(
    """distinct select on columns"""
    distinct_on: [paymentmethod_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [paymentmethod_order_by!]

    """filter the rows returned"""
    where: paymentmethod_bool_exp
  ): [paymentmethod!]!

  """
  fetch aggregated fields from the table: "paymentmethod"
  """
  paymentmethod_aggregate(
    """distinct select on columns"""
    distinct_on: [paymentmethod_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [paymentmethod_order_by!]

    """filter the rows returned"""
    where: paymentmethod_bool_exp
  ): paymentmethod_aggregate!

  """fetch data from the table: "paymentmethod" using primary key columns"""
  paymentmethod_by_pk(id: Int!): paymentmethod

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): [role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  role_aggregate(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): role_aggregate!

  """fetch data from the table: "role" using primary key columns"""
  role_by_pk(id: Int!): role

  """
  fetch data from the table: "sessions"
  """
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """
  fetch aggregated fields from the table: "sessions"
  """
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!

  """fetch data from the table: "sessions" using primary key columns"""
  sessions_by_pk(sid: String!): sessions

  """
  fetch data from the table: "shift"
  """
  shift(
    """distinct select on columns"""
    distinct_on: [shift_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shift_order_by!]

    """filter the rows returned"""
    where: shift_bool_exp
  ): [shift!]!

  """
  fetch aggregated fields from the table: "shift"
  """
  shift_aggregate(
    """distinct select on columns"""
    distinct_on: [shift_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shift_order_by!]

    """filter the rows returned"""
    where: shift_bool_exp
  ): shift_aggregate!

  """fetch data from the table: "shift" using primary key columns"""
  shift_by_pk(id: Int!): shift

  """
  fetch data from the table: "specialrequest"
  """
  specialrequest(
    """distinct select on columns"""
    distinct_on: [specialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [specialrequest_order_by!]

    """filter the rows returned"""
    where: specialrequest_bool_exp
  ): [specialrequest!]!

  """
  fetch aggregated fields from the table: "specialrequest"
  """
  specialrequest_aggregate(
    """distinct select on columns"""
    distinct_on: [specialrequest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [specialrequest_order_by!]

    """filter the rows returned"""
    where: specialrequest_bool_exp
  ): specialrequest_aggregate!

  """fetch data from the table: "specialrequest" using primary key columns"""
  specialrequest_by_pk(id: Int!): specialrequest

  """
  fetch data from the table: "systemsetting"
  """
  systemsetting(
    """distinct select on columns"""
    distinct_on: [systemsetting_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [systemsetting_order_by!]

    """filter the rows returned"""
    where: systemsetting_bool_exp
  ): [systemsetting!]!

  """
  fetch aggregated fields from the table: "systemsetting"
  """
  systemsetting_aggregate(
    """distinct select on columns"""
    distinct_on: [systemsetting_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [systemsetting_order_by!]

    """filter the rows returned"""
    where: systemsetting_bool_exp
  ): systemsetting_aggregate!

  """fetch data from the table: "systemsetting" using primary key columns"""
  systemsetting_by_pk(id: Int!): systemsetting

  """
  fetch data from the table: "table"
  """
  table(
    """distinct select on columns"""
    distinct_on: [table_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [table_order_by!]

    """filter the rows returned"""
    where: table_bool_exp
  ): [table!]!

  """
  fetch aggregated fields from the table: "table"
  """
  table_aggregate(
    """distinct select on columns"""
    distinct_on: [table_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [table_order_by!]

    """filter the rows returned"""
    where: table_bool_exp
  ): table_aggregate!

  """fetch data from the table: "table" using primary key columns"""
  table_by_pk(id: Int!): table

  """
  fetch data from the table: "voidreason"
  """
  voidreason(
    """distinct select on columns"""
    distinct_on: [voidreason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voidreason_order_by!]

    """filter the rows returned"""
    where: voidreason_bool_exp
  ): [voidreason!]!

  """
  fetch aggregated fields from the table: "voidreason"
  """
  voidreason_aggregate(
    """distinct select on columns"""
    distinct_on: [voidreason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voidreason_order_by!]

    """filter the rows returned"""
    where: voidreason_bool_exp
  ): voidreason_aggregate!

  """fetch data from the table: "voidreason" using primary key columns"""
  voidreason_by_pk(id: Int!): voidreason

  """
  fetch data from the table: "worksession"
  """
  worksession(
    """distinct select on columns"""
    distinct_on: [worksession_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [worksession_order_by!]

    """filter the rows returned"""
    where: worksession_bool_exp
  ): [worksession!]!

  """
  fetch aggregated fields from the table: "worksession"
  """
  worksession_aggregate(
    """distinct select on columns"""
    distinct_on: [worksession_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [worksession_order_by!]

    """filter the rows returned"""
    where: worksession_bool_exp
  ): worksession_aggregate!

  """fetch data from the table: "worksession" using primary key columns"""
  worksession_by_pk(id: Int!): worksession
}

"""
columns and relationships of "systemsetting"
"""
type systemsetting {
  address: String!
  id: Int!
  restaurantimage: String
  restaurantname: String!
  taxvalue: Int!
}

"""
aggregated selection of "systemsetting"
"""
type systemsetting_aggregate {
  aggregate: systemsetting_aggregate_fields
  nodes: [systemsetting!]!
}

"""
aggregate fields of "systemsetting"
"""
type systemsetting_aggregate_fields {
  avg: systemsetting_avg_fields
  count(columns: [systemsetting_select_column!], distinct: Boolean): Int!
  max: systemsetting_max_fields
  min: systemsetting_min_fields
  stddev: systemsetting_stddev_fields
  stddev_pop: systemsetting_stddev_pop_fields
  stddev_samp: systemsetting_stddev_samp_fields
  sum: systemsetting_sum_fields
  var_pop: systemsetting_var_pop_fields
  var_samp: systemsetting_var_samp_fields
  variance: systemsetting_variance_fields
}

"""aggregate avg on columns"""
type systemsetting_avg_fields {
  id: Float
  taxvalue: Float
}

"""
Boolean expression to filter rows from the table "systemsetting". All fields are combined with a logical 'AND'.
"""
input systemsetting_bool_exp {
  _and: [systemsetting_bool_exp!]
  _not: systemsetting_bool_exp
  _or: [systemsetting_bool_exp!]
  address: String_comparison_exp
  id: Int_comparison_exp
  restaurantimage: String_comparison_exp
  restaurantname: String_comparison_exp
  taxvalue: Int_comparison_exp
}

"""
unique or primary key constraints on table "systemsetting"
"""
enum systemsetting_constraint {
  """unique or primary key constraint"""
  systemsetting_pkey
}

"""
input type for incrementing numeric columns in table "systemsetting"
"""
input systemsetting_inc_input {
  id: Int
  taxvalue: Int
}

"""
input type for inserting data into table "systemsetting"
"""
input systemsetting_insert_input {
  address: String
  id: Int
  restaurantimage: String
  restaurantname: String
  taxvalue: Int
}

"""aggregate max on columns"""
type systemsetting_max_fields {
  address: String
  id: Int
  restaurantimage: String
  restaurantname: String
  taxvalue: Int
}

"""aggregate min on columns"""
type systemsetting_min_fields {
  address: String
  id: Int
  restaurantimage: String
  restaurantname: String
  taxvalue: Int
}

"""
response of any mutation on the table "systemsetting"
"""
type systemsetting_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [systemsetting!]!
}

"""
on_conflict condition type for table "systemsetting"
"""
input systemsetting_on_conflict {
  constraint: systemsetting_constraint!
  update_columns: [systemsetting_update_column!]! = []
  where: systemsetting_bool_exp
}

"""Ordering options when selecting data from "systemsetting"."""
input systemsetting_order_by {
  address: order_by
  id: order_by
  restaurantimage: order_by
  restaurantname: order_by
  taxvalue: order_by
}

"""primary key columns input for table: systemsetting"""
input systemsetting_pk_columns_input {
  id: Int!
}

"""
select columns of table "systemsetting"
"""
enum systemsetting_select_column {
  """column name"""
  address

  """column name"""
  id

  """column name"""
  restaurantimage

  """column name"""
  restaurantname

  """column name"""
  taxvalue
}

"""
input type for updating data in table "systemsetting"
"""
input systemsetting_set_input {
  address: String
  id: Int
  restaurantimage: String
  restaurantname: String
  taxvalue: Int
}

"""aggregate stddev on columns"""
type systemsetting_stddev_fields {
  id: Float
  taxvalue: Float
}

"""aggregate stddev_pop on columns"""
type systemsetting_stddev_pop_fields {
  id: Float
  taxvalue: Float
}

"""aggregate stddev_samp on columns"""
type systemsetting_stddev_samp_fields {
  id: Float
  taxvalue: Float
}

"""aggregate sum on columns"""
type systemsetting_sum_fields {
  id: Int
  taxvalue: Int
}

"""
update columns of table "systemsetting"
"""
enum systemsetting_update_column {
  """column name"""
  address

  """column name"""
  id

  """column name"""
  restaurantimage

  """column name"""
  restaurantname

  """column name"""
  taxvalue
}

"""aggregate var_pop on columns"""
type systemsetting_var_pop_fields {
  id: Float
  taxvalue: Float
}

"""aggregate var_samp on columns"""
type systemsetting_var_samp_fields {
  id: Float
  taxvalue: Float
}

"""aggregate variance on columns"""
type systemsetting_variance_fields {
  id: Float
  taxvalue: Float
}

"""
columns and relationships of "table"
"""
type table {
  """An array relationship"""
  checks(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): [check!]!

  """An aggregate relationship"""
  checks_aggregate(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): check_aggregate!
  id: Int!

  """An object relationship"""
  location: location!
  locationid: Int!
  name: String!
  seat: Int!
  status: table_status!
}

"""
aggregated selection of "table"
"""
type table_aggregate {
  aggregate: table_aggregate_fields
  nodes: [table!]!
}

"""
aggregate fields of "table"
"""
type table_aggregate_fields {
  avg: table_avg_fields
  count(columns: [table_select_column!], distinct: Boolean): Int!
  max: table_max_fields
  min: table_min_fields
  stddev: table_stddev_fields
  stddev_pop: table_stddev_pop_fields
  stddev_samp: table_stddev_samp_fields
  sum: table_sum_fields
  var_pop: table_var_pop_fields
  var_samp: table_var_samp_fields
  variance: table_variance_fields
}

"""
order by aggregate values of table "table"
"""
input table_aggregate_order_by {
  avg: table_avg_order_by
  count: order_by
  max: table_max_order_by
  min: table_min_order_by
  stddev: table_stddev_order_by
  stddev_pop: table_stddev_pop_order_by
  stddev_samp: table_stddev_samp_order_by
  sum: table_sum_order_by
  var_pop: table_var_pop_order_by
  var_samp: table_var_samp_order_by
  variance: table_variance_order_by
}

"""
input type for inserting array relation for remote table "table"
"""
input table_arr_rel_insert_input {
  data: [table_insert_input!]!

  """upsert condition"""
  on_conflict: table_on_conflict
}

"""aggregate avg on columns"""
type table_avg_fields {
  id: Float
  locationid: Float
  seat: Float
}

"""
order by avg() on columns of table "table"
"""
input table_avg_order_by {
  id: order_by
  locationid: order_by
  seat: order_by
}

"""
Boolean expression to filter rows from the table "table". All fields are combined with a logical 'AND'.
"""
input table_bool_exp {
  _and: [table_bool_exp!]
  _not: table_bool_exp
  _or: [table_bool_exp!]
  checks: check_bool_exp
  id: Int_comparison_exp
  location: location_bool_exp
  locationid: Int_comparison_exp
  name: String_comparison_exp
  seat: Int_comparison_exp
  status: table_status_comparison_exp
}

"""
unique or primary key constraints on table "table"
"""
enum table_constraint {
  """unique or primary key constraint"""
  table_pkey
}

"""
input type for incrementing numeric columns in table "table"
"""
input table_inc_input {
  id: Int
  locationid: Int
  seat: Int
}

"""
input type for inserting data into table "table"
"""
input table_insert_input {
  checks: check_arr_rel_insert_input
  id: Int
  location: location_obj_rel_insert_input
  locationid: Int
  name: String
  seat: Int
  status: table_status
}

"""aggregate max on columns"""
type table_max_fields {
  id: Int
  locationid: Int
  name: String
  seat: Int
  status: table_status
}

"""
order by max() on columns of table "table"
"""
input table_max_order_by {
  id: order_by
  locationid: order_by
  name: order_by
  seat: order_by
  status: order_by
}

"""aggregate min on columns"""
type table_min_fields {
  id: Int
  locationid: Int
  name: String
  seat: Int
  status: table_status
}

"""
order by min() on columns of table "table"
"""
input table_min_order_by {
  id: order_by
  locationid: order_by
  name: order_by
  seat: order_by
  status: order_by
}

"""
response of any mutation on the table "table"
"""
type table_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [table!]!
}

"""
input type for inserting object relation for remote table "table"
"""
input table_obj_rel_insert_input {
  data: table_insert_input!

  """upsert condition"""
  on_conflict: table_on_conflict
}

"""
on_conflict condition type for table "table"
"""
input table_on_conflict {
  constraint: table_constraint!
  update_columns: [table_update_column!]! = []
  where: table_bool_exp
}

"""Ordering options when selecting data from "table"."""
input table_order_by {
  checks_aggregate: check_aggregate_order_by
  id: order_by
  location: location_order_by
  locationid: order_by
  name: order_by
  seat: order_by
  status: order_by
}

"""primary key columns input for table: table"""
input table_pk_columns_input {
  id: Int!
}

"""
select columns of table "table"
"""
enum table_select_column {
  """column name"""
  id

  """column name"""
  locationid

  """column name"""
  name

  """column name"""
  seat

  """column name"""
  status
}

"""
input type for updating data in table "table"
"""
input table_set_input {
  id: Int
  locationid: Int
  name: String
  seat: Int
  status: table_status
}

scalar table_status

"""
Boolean expression to compare columns of type "table_status". All fields are combined with logical 'AND'.
"""
input table_status_comparison_exp {
  _eq: table_status
  _gt: table_status
  _gte: table_status
  _in: [table_status!]
  _is_null: Boolean
  _lt: table_status
  _lte: table_status
  _neq: table_status
  _nin: [table_status!]
}

"""aggregate stddev on columns"""
type table_stddev_fields {
  id: Float
  locationid: Float
  seat: Float
}

"""
order by stddev() on columns of table "table"
"""
input table_stddev_order_by {
  id: order_by
  locationid: order_by
  seat: order_by
}

"""aggregate stddev_pop on columns"""
type table_stddev_pop_fields {
  id: Float
  locationid: Float
  seat: Float
}

"""
order by stddev_pop() on columns of table "table"
"""
input table_stddev_pop_order_by {
  id: order_by
  locationid: order_by
  seat: order_by
}

"""aggregate stddev_samp on columns"""
type table_stddev_samp_fields {
  id: Float
  locationid: Float
  seat: Float
}

"""
order by stddev_samp() on columns of table "table"
"""
input table_stddev_samp_order_by {
  id: order_by
  locationid: order_by
  seat: order_by
}

"""aggregate sum on columns"""
type table_sum_fields {
  id: Int
  locationid: Int
  seat: Int
}

"""
order by sum() on columns of table "table"
"""
input table_sum_order_by {
  id: order_by
  locationid: order_by
  seat: order_by
}

"""
update columns of table "table"
"""
enum table_update_column {
  """column name"""
  id

  """column name"""
  locationid

  """column name"""
  name

  """column name"""
  seat

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type table_var_pop_fields {
  id: Float
  locationid: Float
  seat: Float
}

"""
order by var_pop() on columns of table "table"
"""
input table_var_pop_order_by {
  id: order_by
  locationid: order_by
  seat: order_by
}

"""aggregate var_samp on columns"""
type table_var_samp_fields {
  id: Float
  locationid: Float
  seat: Float
}

"""
order by var_samp() on columns of table "table"
"""
input table_var_samp_order_by {
  id: order_by
  locationid: order_by
  seat: order_by
}

"""aggregate variance on columns"""
type table_variance_fields {
  id: Float
  locationid: Float
  seat: Float
}

"""
order by variance() on columns of table "table"
"""
input table_variance_order_by {
  id: order_by
  locationid: order_by
  seat: order_by
}

scalar time

"""
Boolean expression to compare columns of type "time". All fields are combined with logical 'AND'.
"""
input time_comparison_exp {
  _eq: time
  _gt: time
  _gte: time
  _in: [time!]
  _is_null: Boolean
  _lt: time
  _lte: time
  _neq: time
  _nin: [time!]
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar user_status

"""
Boolean expression to compare columns of type "user_status". All fields are combined with logical 'AND'.
"""
input user_status_comparison_exp {
  _eq: user_status
  _gt: user_status
  _gte: user_status
  _in: [user_status!]
  _is_null: Boolean
  _lt: user_status
  _lte: user_status
  _neq: user_status
  _nin: [user_status!]
}

"""
columns and relationships of "voidreason"
"""
type voidreason {
  """An array relationship"""
  checkdetails(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): [checkdetail!]!

  """An aggregate relationship"""
  checkdetails_aggregate(
    """distinct select on columns"""
    distinct_on: [checkdetail_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checkdetail_order_by!]

    """filter the rows returned"""
    where: checkdetail_bool_exp
  ): checkdetail_aggregate!

  """An array relationship"""
  checks(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): [check!]!

  """An aggregate relationship"""
  checks_aggregate(
    """distinct select on columns"""
    distinct_on: [check_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [check_order_by!]

    """filter the rows returned"""
    where: check_bool_exp
  ): check_aggregate!
  id: Int!
  name: String!
  status: basic_status!
}

"""
aggregated selection of "voidreason"
"""
type voidreason_aggregate {
  aggregate: voidreason_aggregate_fields
  nodes: [voidreason!]!
}

"""
aggregate fields of "voidreason"
"""
type voidreason_aggregate_fields {
  avg: voidreason_avg_fields
  count(columns: [voidreason_select_column!], distinct: Boolean): Int!
  max: voidreason_max_fields
  min: voidreason_min_fields
  stddev: voidreason_stddev_fields
  stddev_pop: voidreason_stddev_pop_fields
  stddev_samp: voidreason_stddev_samp_fields
  sum: voidreason_sum_fields
  var_pop: voidreason_var_pop_fields
  var_samp: voidreason_var_samp_fields
  variance: voidreason_variance_fields
}

"""aggregate avg on columns"""
type voidreason_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "voidreason". All fields are combined with a logical 'AND'.
"""
input voidreason_bool_exp {
  _and: [voidreason_bool_exp!]
  _not: voidreason_bool_exp
  _or: [voidreason_bool_exp!]
  checkdetails: checkdetail_bool_exp
  checks: check_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  status: basic_status_comparison_exp
}

"""
unique or primary key constraints on table "voidreason"
"""
enum voidreason_constraint {
  """unique or primary key constraint"""
  voidreason_pkey
}

"""
input type for incrementing numeric columns in table "voidreason"
"""
input voidreason_inc_input {
  id: Int
}

"""
input type for inserting data into table "voidreason"
"""
input voidreason_insert_input {
  checkdetails: checkdetail_arr_rel_insert_input
  checks: check_arr_rel_insert_input
  id: Int
  name: String
  status: basic_status
}

"""aggregate max on columns"""
type voidreason_max_fields {
  id: Int
  name: String
  status: basic_status
}

"""aggregate min on columns"""
type voidreason_min_fields {
  id: Int
  name: String
  status: basic_status
}

"""
response of any mutation on the table "voidreason"
"""
type voidreason_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [voidreason!]!
}

"""
input type for inserting object relation for remote table "voidreason"
"""
input voidreason_obj_rel_insert_input {
  data: voidreason_insert_input!

  """upsert condition"""
  on_conflict: voidreason_on_conflict
}

"""
on_conflict condition type for table "voidreason"
"""
input voidreason_on_conflict {
  constraint: voidreason_constraint!
  update_columns: [voidreason_update_column!]! = []
  where: voidreason_bool_exp
}

"""Ordering options when selecting data from "voidreason"."""
input voidreason_order_by {
  checkdetails_aggregate: checkdetail_aggregate_order_by
  checks_aggregate: check_aggregate_order_by
  id: order_by
  name: order_by
  status: order_by
}

"""primary key columns input for table: voidreason"""
input voidreason_pk_columns_input {
  id: Int!
}

"""
select columns of table "voidreason"
"""
enum voidreason_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""
input type for updating data in table "voidreason"
"""
input voidreason_set_input {
  id: Int
  name: String
  status: basic_status
}

"""aggregate stddev on columns"""
type voidreason_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type voidreason_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type voidreason_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type voidreason_sum_fields {
  id: Int
}

"""
update columns of table "voidreason"
"""
enum voidreason_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type voidreason_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type voidreason_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type voidreason_variance_fields {
  id: Float
}

"""
columns and relationships of "worksession"
"""
type worksession {
  creationtime: timestamp!
  creatorid: Int!
  id: Int!
  isopen: Boolean!

  """An array relationship"""
  shifts(
    """distinct select on columns"""
    distinct_on: [shift_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shift_order_by!]

    """filter the rows returned"""
    where: shift_bool_exp
  ): [shift!]!

  """An aggregate relationship"""
  shifts_aggregate(
    """distinct select on columns"""
    distinct_on: [shift_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shift_order_by!]

    """filter the rows returned"""
    where: shift_bool_exp
  ): shift_aggregate!
  updaterid: Int
  updatetime: timestamp
  workdate: date!
}

"""
aggregated selection of "worksession"
"""
type worksession_aggregate {
  aggregate: worksession_aggregate_fields
  nodes: [worksession!]!
}

"""
aggregate fields of "worksession"
"""
type worksession_aggregate_fields {
  avg: worksession_avg_fields
  count(columns: [worksession_select_column!], distinct: Boolean): Int!
  max: worksession_max_fields
  min: worksession_min_fields
  stddev: worksession_stddev_fields
  stddev_pop: worksession_stddev_pop_fields
  stddev_samp: worksession_stddev_samp_fields
  sum: worksession_sum_fields
  var_pop: worksession_var_pop_fields
  var_samp: worksession_var_samp_fields
  variance: worksession_variance_fields
}

"""aggregate avg on columns"""
type worksession_avg_fields {
  creatorid: Float
  id: Float
  updaterid: Float
}

"""
Boolean expression to filter rows from the table "worksession". All fields are combined with a logical 'AND'.
"""
input worksession_bool_exp {
  _and: [worksession_bool_exp!]
  _not: worksession_bool_exp
  _or: [worksession_bool_exp!]
  creationtime: timestamp_comparison_exp
  creatorid: Int_comparison_exp
  id: Int_comparison_exp
  isopen: Boolean_comparison_exp
  shifts: shift_bool_exp
  updaterid: Int_comparison_exp
  updatetime: timestamp_comparison_exp
  workdate: date_comparison_exp
}

"""
unique or primary key constraints on table "worksession"
"""
enum worksession_constraint {
  """unique or primary key constraint"""
  worksession_pkey
}

"""
input type for incrementing numeric columns in table "worksession"
"""
input worksession_inc_input {
  creatorid: Int
  id: Int
  updaterid: Int
}

"""
input type for inserting data into table "worksession"
"""
input worksession_insert_input {
  creationtime: timestamp
  creatorid: Int
  id: Int
  isopen: Boolean
  shifts: shift_arr_rel_insert_input
  updaterid: Int
  updatetime: timestamp
  workdate: date
}

"""aggregate max on columns"""
type worksession_max_fields {
  creationtime: timestamp
  creatorid: Int
  id: Int
  updaterid: Int
  updatetime: timestamp
  workdate: date
}

"""aggregate min on columns"""
type worksession_min_fields {
  creationtime: timestamp
  creatorid: Int
  id: Int
  updaterid: Int
  updatetime: timestamp
  workdate: date
}

"""
response of any mutation on the table "worksession"
"""
type worksession_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [worksession!]!
}

"""
input type for inserting object relation for remote table "worksession"
"""
input worksession_obj_rel_insert_input {
  data: worksession_insert_input!

  """upsert condition"""
  on_conflict: worksession_on_conflict
}

"""
on_conflict condition type for table "worksession"
"""
input worksession_on_conflict {
  constraint: worksession_constraint!
  update_columns: [worksession_update_column!]! = []
  where: worksession_bool_exp
}

"""Ordering options when selecting data from "worksession"."""
input worksession_order_by {
  creationtime: order_by
  creatorid: order_by
  id: order_by
  isopen: order_by
  shifts_aggregate: shift_aggregate_order_by
  updaterid: order_by
  updatetime: order_by
  workdate: order_by
}

"""primary key columns input for table: worksession"""
input worksession_pk_columns_input {
  id: Int!
}

"""
select columns of table "worksession"
"""
enum worksession_select_column {
  """column name"""
  creationtime

  """column name"""
  creatorid

  """column name"""
  id

  """column name"""
  isopen

  """column name"""
  updaterid

  """column name"""
  updatetime

  """column name"""
  workdate
}

"""
input type for updating data in table "worksession"
"""
input worksession_set_input {
  creationtime: timestamp
  creatorid: Int
  id: Int
  isopen: Boolean
  updaterid: Int
  updatetime: timestamp
  workdate: date
}

"""aggregate stddev on columns"""
type worksession_stddev_fields {
  creatorid: Float
  id: Float
  updaterid: Float
}

"""aggregate stddev_pop on columns"""
type worksession_stddev_pop_fields {
  creatorid: Float
  id: Float
  updaterid: Float
}

"""aggregate stddev_samp on columns"""
type worksession_stddev_samp_fields {
  creatorid: Float
  id: Float
  updaterid: Float
}

"""aggregate sum on columns"""
type worksession_sum_fields {
  creatorid: Int
  id: Int
  updaterid: Int
}

"""
update columns of table "worksession"
"""
enum worksession_update_column {
  """column name"""
  creationtime

  """column name"""
  creatorid

  """column name"""
  id

  """column name"""
  isopen

  """column name"""
  updaterid

  """column name"""
  updatetime

  """column name"""
  workdate
}

"""aggregate var_pop on columns"""
type worksession_var_pop_fields {
  creatorid: Float
  id: Float
  updaterid: Float
}

"""aggregate var_samp on columns"""
type worksession_var_samp_fields {
  creatorid: Float
  id: Float
  updaterid: Float
}

"""aggregate variance on columns"""
type worksession_variance_fields {
  creatorid: Float
  id: Float
  updaterid: Float
}

